//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IDiceGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DiceGrammarBaseListener : IDiceGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="DiceGrammarParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInput([NotNull] DiceGrammarParser.InputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiceGrammarParser.input"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInput([NotNull] DiceGrammarParser.InputContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MathNormal</c>
	/// labeled alternative in <see cref="DiceGrammarParser.math_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathNormal([NotNull] DiceGrammarParser.MathNormalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathNormal</c>
	/// labeled alternative in <see cref="DiceGrammarParser.math_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathNormal([NotNull] DiceGrammarParser.MathNormalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MathFunction</c>
	/// labeled alternative in <see cref="DiceGrammarParser.math_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathFunction([NotNull] DiceGrammarParser.MathFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MathFunction</c>
	/// labeled alternative in <see cref="DiceGrammarParser.math_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathFunction([NotNull] DiceGrammarParser.MathFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultMult</c>
	/// labeled alternative in <see cref="DiceGrammarParser.mult_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultMult([NotNull] DiceGrammarParser.MultMultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultMult</c>
	/// labeled alternative in <see cref="DiceGrammarParser.mult_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultMult([NotNull] DiceGrammarParser.MultMultContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultNone</c>
	/// labeled alternative in <see cref="DiceGrammarParser.mult_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultNone([NotNull] DiceGrammarParser.MultNoneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultNone</c>
	/// labeled alternative in <see cref="DiceGrammarParser.mult_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultNone([NotNull] DiceGrammarParser.MultNoneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultDiv</c>
	/// labeled alternative in <see cref="DiceGrammarParser.mult_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultDiv([NotNull] DiceGrammarParser.MultDivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultDiv</c>
	/// labeled alternative in <see cref="DiceGrammarParser.mult_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultDiv([NotNull] DiceGrammarParser.MultDivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="DiceGrammarParser.add_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSub([NotNull] DiceGrammarParser.AddSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="DiceGrammarParser.add_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSub([NotNull] DiceGrammarParser.AddSubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddNone</c>
	/// labeled alternative in <see cref="DiceGrammarParser.add_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddNone([NotNull] DiceGrammarParser.AddNoneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddNone</c>
	/// labeled alternative in <see cref="DiceGrammarParser.add_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddNone([NotNull] DiceGrammarParser.AddNoneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddAdd</c>
	/// labeled alternative in <see cref="DiceGrammarParser.add_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddAdd([NotNull] DiceGrammarParser.AddAddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddAdd</c>
	/// labeled alternative in <see cref="DiceGrammarParser.add_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddAdd([NotNull] DiceGrammarParser.AddAddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenParen</c>
	/// labeled alternative in <see cref="DiceGrammarParser.paren_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenParen([NotNull] DiceGrammarParser.ParenParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenParen</c>
	/// labeled alternative in <see cref="DiceGrammarParser.paren_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenParen([NotNull] DiceGrammarParser.ParenParenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenNumber</c>
	/// labeled alternative in <see cref="DiceGrammarParser.paren_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenNumber([NotNull] DiceGrammarParser.ParenNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenNumber</c>
	/// labeled alternative in <see cref="DiceGrammarParser.paren_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenNumber([NotNull] DiceGrammarParser.ParenNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenGroup</c>
	/// labeled alternative in <see cref="DiceGrammarParser.paren_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenGroup([NotNull] DiceGrammarParser.ParenGroupContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenGroup</c>
	/// labeled alternative in <see cref="DiceGrammarParser.paren_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenGroup([NotNull] DiceGrammarParser.ParenGroupContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NexprParen</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNexprParen([NotNull] DiceGrammarParser.NexprParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NexprParen</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNexprParen([NotNull] DiceGrammarParser.NexprParenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NexprNumber</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNexprNumber([NotNull] DiceGrammarParser.NexprNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NexprNumber</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNexprNumber([NotNull] DiceGrammarParser.NexprNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberLiteral</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberLiteral([NotNull] DiceGrammarParser.NumberLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberLiteral</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberLiteral([NotNull] DiceGrammarParser.NumberLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberMacro</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberMacro([NotNull] DiceGrammarParser.NumberMacroContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberMacro</c>
	/// labeled alternative in <see cref="DiceGrammarParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberMacro([NotNull] DiceGrammarParser.NumberMacroContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DiceGrammarParser.global_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGlobal_function([NotNull] DiceGrammarParser.Global_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiceGrammarParser.global_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGlobal_function([NotNull] DiceGrammarParser.Global_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DiceGrammarParser.group_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroup_function([NotNull] DiceGrammarParser.Group_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiceGrammarParser.group_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroup_function([NotNull] DiceGrammarParser.Group_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DiceGrammarParser.basic_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasic_function([NotNull] DiceGrammarParser.Basic_functionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiceGrammarParser.basic_function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasic_function([NotNull] DiceGrammarParser.Basic_functionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupGroup</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupGroup([NotNull] DiceGrammarParser.GroupGroupContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupGroup</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupGroup([NotNull] DiceGrammarParser.GroupGroupContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupBasic</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupBasic([NotNull] DiceGrammarParser.GroupBasicContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupBasic</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupBasic([NotNull] DiceGrammarParser.GroupBasicContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupInit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupInit([NotNull] DiceGrammarParser.GroupInitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupInit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupInit([NotNull] DiceGrammarParser.GroupInitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupExtra</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupExtra([NotNull] DiceGrammarParser.GroupExtraContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupExtra</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_roll_inner"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupExtra([NotNull] DiceGrammarParser.GroupExtraContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupKeep</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupKeep([NotNull] DiceGrammarParser.GroupKeepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupKeep</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupKeep([NotNull] DiceGrammarParser.GroupKeepContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupSuccess</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupSuccess([NotNull] DiceGrammarParser.GroupSuccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupSuccess</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupSuccess([NotNull] DiceGrammarParser.GroupSuccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GroupSort</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGroupSort([NotNull] DiceGrammarParser.GroupSortContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GroupSort</c>
	/// labeled alternative in <see cref="DiceGrammarParser.grouped_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGroupSort([NotNull] DiceGrammarParser.GroupSortContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicBasic</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicBasic([NotNull] DiceGrammarParser.BasicBasicContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicBasic</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicBasic([NotNull] DiceGrammarParser.BasicBasicContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicFudge</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicFudge([NotNull] DiceGrammarParser.BasicFudgeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicFudge</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_roll"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicFudge([NotNull] DiceGrammarParser.BasicFudgeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicReroll</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicReroll([NotNull] DiceGrammarParser.BasicRerollContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicReroll</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicReroll([NotNull] DiceGrammarParser.BasicRerollContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicExplode</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicExplode([NotNull] DiceGrammarParser.BasicExplodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicExplode</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicExplode([NotNull] DiceGrammarParser.BasicExplodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicKeep</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicKeep([NotNull] DiceGrammarParser.BasicKeepContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicKeep</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicKeep([NotNull] DiceGrammarParser.BasicKeepContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicSuccess</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicSuccess([NotNull] DiceGrammarParser.BasicSuccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicSuccess</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicSuccess([NotNull] DiceGrammarParser.BasicSuccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicSort</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicSort([NotNull] DiceGrammarParser.BasicSortContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicSort</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicSort([NotNull] DiceGrammarParser.BasicSortContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BasicCrit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBasicCrit([NotNull] DiceGrammarParser.BasicCritContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BasicCrit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.basic_extras"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBasicCrit([NotNull] DiceGrammarParser.BasicCritContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>KeepHigh</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeepHigh([NotNull] DiceGrammarParser.KeepHighContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>KeepHigh</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeepHigh([NotNull] DiceGrammarParser.KeepHighContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>KeepLow</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeepLow([NotNull] DiceGrammarParser.KeepLowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>KeepLow</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeepLow([NotNull] DiceGrammarParser.KeepLowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DropHigh</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDropHigh([NotNull] DiceGrammarParser.DropHighContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DropHigh</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDropHigh([NotNull] DiceGrammarParser.DropHighContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DropLow</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDropLow([NotNull] DiceGrammarParser.DropLowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DropLow</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDropLow([NotNull] DiceGrammarParser.DropLowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Advantage</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdvantage([NotNull] DiceGrammarParser.AdvantageContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Advantage</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdvantage([NotNull] DiceGrammarParser.AdvantageContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Disadvantage</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDisadvantage([NotNull] DiceGrammarParser.DisadvantageContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Disadvantage</c>
	/// labeled alternative in <see cref="DiceGrammarParser.keep_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDisadvantage([NotNull] DiceGrammarParser.DisadvantageContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RerollReroll</c>
	/// labeled alternative in <see cref="DiceGrammarParser.reroll_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRerollReroll([NotNull] DiceGrammarParser.RerollRerollContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RerollReroll</c>
	/// labeled alternative in <see cref="DiceGrammarParser.reroll_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRerollReroll([NotNull] DiceGrammarParser.RerollRerollContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RerollOnce</c>
	/// labeled alternative in <see cref="DiceGrammarParser.reroll_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRerollOnce([NotNull] DiceGrammarParser.RerollOnceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RerollOnce</c>
	/// labeled alternative in <see cref="DiceGrammarParser.reroll_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRerollOnce([NotNull] DiceGrammarParser.RerollOnceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Explode</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explode_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExplode([NotNull] DiceGrammarParser.ExplodeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Explode</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explode_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExplode([NotNull] DiceGrammarParser.ExplodeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Compound</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explode_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompound([NotNull] DiceGrammarParser.CompoundContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Compound</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explode_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompound([NotNull] DiceGrammarParser.CompoundContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Penetrate</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explode_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPenetrate([NotNull] DiceGrammarParser.PenetrateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Penetrate</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explode_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPenetrate([NotNull] DiceGrammarParser.PenetrateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DiceGrammarParser.success_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSuccess_expr([NotNull] DiceGrammarParser.Success_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiceGrammarParser.success_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSuccess_expr([NotNull] DiceGrammarParser.Success_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CompImplicit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompImplicit([NotNull] DiceGrammarParser.CompImplicitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CompImplicit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompImplicit([NotNull] DiceGrammarParser.CompImplicitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CompExplicit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompExplicit([NotNull] DiceGrammarParser.CompExplicitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CompExplicit</c>
	/// labeled alternative in <see cref="DiceGrammarParser.compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompExplicit([NotNull] DiceGrammarParser.CompExplicitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Equals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquals([NotNull] DiceGrammarParser.EqualsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Equals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquals([NotNull] DiceGrammarParser.EqualsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Greater</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreater([NotNull] DiceGrammarParser.GreaterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Greater</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreater([NotNull] DiceGrammarParser.GreaterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Less</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLess([NotNull] DiceGrammarParser.LessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Less</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLess([NotNull] DiceGrammarParser.LessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterEquals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterEquals([NotNull] DiceGrammarParser.GreaterEqualsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterEquals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterEquals([NotNull] DiceGrammarParser.GreaterEqualsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LessEquals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessEquals([NotNull] DiceGrammarParser.LessEqualsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LessEquals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessEquals([NotNull] DiceGrammarParser.LessEqualsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEquals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotEquals([NotNull] DiceGrammarParser.NotEqualsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEquals</c>
	/// labeled alternative in <see cref="DiceGrammarParser.explicit_compare_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotEquals([NotNull] DiceGrammarParser.NotEqualsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SortAsc</c>
	/// labeled alternative in <see cref="DiceGrammarParser.sort_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSortAsc([NotNull] DiceGrammarParser.SortAscContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SortAsc</c>
	/// labeled alternative in <see cref="DiceGrammarParser.sort_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSortAsc([NotNull] DiceGrammarParser.SortAscContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SortDesc</c>
	/// labeled alternative in <see cref="DiceGrammarParser.sort_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSortDesc([NotNull] DiceGrammarParser.SortDescContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SortDesc</c>
	/// labeled alternative in <see cref="DiceGrammarParser.sort_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSortDesc([NotNull] DiceGrammarParser.SortDescContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DiceGrammarParser.crit_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCrit_expr([NotNull] DiceGrammarParser.Crit_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiceGrammarParser.crit_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCrit_expr([NotNull] DiceGrammarParser.Crit_exprContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Dice.Grammar
