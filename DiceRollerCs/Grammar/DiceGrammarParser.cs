//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DiceGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_DIGIT_STRING=1, T_ALPHA_STRING=2, T_STRING=3, T_D=4, T_FUDGE=5, T_KEEP_HIGH=6, 
		T_KEEP_LOW=7, T_DROP_HIGH=8, T_DROP_LOW=9, T_ADVANTAGE=10, T_DISADVANTAGE=11, 
		T_REROLL=12, T_REROLL_ONCE=13, T_EXPLODE=14, T_COMPOUND=15, T_PENETRATE=16, 
		T_CRIT=17, T_FAIL=18, T_SORT_ASC=19, T_SORT_DESC=20, T_EQUALS=21, T_GREATER=22, 
		T_LESS=23, T_GREATER_EQUALS=24, T_LESS_EQUALS=25, T_NOT_EQUALS=26, T_LBRACE=27, 
		T_RBRACE=28, T_LSQUARE=29, T_RSQUARE=30, T_COMMA=31, T_DOT=32, T_LPAREN=33, 
		T_RPAREN=34, T_PLUS=35, T_MINUS=36, T_MULTIPLY=37, T_DIVIDE=38, WS=39;
	public const int
		RULE_input = 0, RULE_math_expr = 1, RULE_mult_expr = 2, RULE_add_expr = 3, 
		RULE_paren_expr = 4, RULE_number_expr = 5, RULE_number = 6, RULE_global_function = 7, 
		RULE_group_function = 8, RULE_basic_function = 9, RULE_grouped_roll = 10, 
		RULE_grouped_roll_inner = 11, RULE_grouped_extras = 12, RULE_basic_roll = 13, 
		RULE_basic_extras = 14, RULE_keep_expr = 15, RULE_reroll_expr = 16, RULE_explode_expr = 17, 
		RULE_success_expr = 18, RULE_compare_expr = 19, RULE_explicit_compare_expr = 20, 
		RULE_sort_expr = 21, RULE_crit_expr = 22;
	public static readonly string[] ruleNames = {
		"input", "math_expr", "mult_expr", "add_expr", "paren_expr", "number_expr", 
		"number", "global_function", "group_function", "basic_function", "grouped_roll", 
		"grouped_roll_inner", "grouped_extras", "basic_roll", "basic_extras", 
		"keep_expr", "reroll_expr", "explode_expr", "success_expr", "compare_expr", 
		"explicit_compare_expr", "sort_expr", "crit_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'d'", "'F'", "'kh'", "'kl'", "'dh'", "'dl'", 
		"'ad'", "'da'", "'rr'", "'ro'", "'!e'", "'!c'", "'!p'", "'cs'", "'f'", 
		"'sa'", "'sd'", "'='", "'>'", "'<'", "'>='", "'<='", null, "'{'", "'}'", 
		"'['", "']'", "','", "'.'", "'('", "')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_DIGIT_STRING", "T_ALPHA_STRING", "T_STRING", "T_D", "T_FUDGE", 
		"T_KEEP_HIGH", "T_KEEP_LOW", "T_DROP_HIGH", "T_DROP_LOW", "T_ADVANTAGE", 
		"T_DISADVANTAGE", "T_REROLL", "T_REROLL_ONCE", "T_EXPLODE", "T_COMPOUND", 
		"T_PENETRATE", "T_CRIT", "T_FAIL", "T_SORT_ASC", "T_SORT_DESC", "T_EQUALS", 
		"T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", "T_NOT_EQUALS", 
		"T_LBRACE", "T_RBRACE", "T_LSQUARE", "T_RSQUARE", "T_COMMA", "T_DOT", 
		"T_LPAREN", "T_RPAREN", "T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiceGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DiceGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DiceGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DiceGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class InputContext : ParserRuleContext {
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; math_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_exprContext : ParserRuleContext {
		public Math_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_expr; } }
	 
		public Math_exprContext() { }
		public virtual void CopyFrom(Math_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathFunctionContext : Math_exprContext {
		public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public MathFunctionContext(Math_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterMathFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitMathFunction(this);
		}
	}
	public partial class MathNormalContext : Math_exprContext {
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public MathNormalContext(Math_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterMathNormal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitMathNormal(this);
		}
	}

	[RuleVersion(0)]
	public Math_exprContext math_expr() {
		Math_exprContext _localctx = new Math_exprContext(Context, State);
		EnterRule(_localctx, 2, RULE_math_expr);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_DIGIT_STRING:
			case T_LBRACE:
			case T_LSQUARE:
			case T_LPAREN:
			case T_MINUS:
				_localctx = new MathNormalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; mult_expr(0);
				}
				break;
			case T_ALPHA_STRING:
				_localctx = new MathFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; global_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
	 
		public Mult_exprContext() { }
		public virtual void CopyFrom(Mult_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultMultContext : Mult_exprContext {
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public ITerminalNode T_MULTIPLY() { return GetToken(DiceGrammarParser.T_MULTIPLY, 0); }
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public MultMultContext(Mult_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterMultMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitMultMult(this);
		}
	}
	public partial class MultNoneContext : Mult_exprContext {
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public MultNoneContext(Mult_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterMultNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitMultNone(this);
		}
	}
	public partial class MultDivContext : Mult_exprContext {
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public ITerminalNode T_DIVIDE() { return GetToken(DiceGrammarParser.T_DIVIDE, 0); }
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public MultDivContext(Mult_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterMultDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitMultDiv(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		return mult_expr(0);
	}

	private Mult_exprContext mult_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mult_exprContext _localctx = new Mult_exprContext(Context, _parentState);
		Mult_exprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_mult_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new MultNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 53; add_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 61;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MultMultContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 55;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 56; Match(T_MULTIPLY);
						State = 57; add_expr(0);
						}
						break;
					case 2:
						{
						_localctx = new MultDivContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 58;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 59; Match(T_DIVIDE);
						State = 60; add_expr(0);
						}
						break;
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
	 
		public Add_exprContext() { }
		public virtual void CopyFrom(Add_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddSubContext : Add_exprContext {
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		public Paren_exprContext paren_expr() {
			return GetRuleContext<Paren_exprContext>(0);
		}
		public AddSubContext(Add_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
	}
	public partial class AddNoneContext : Add_exprContext {
		public Paren_exprContext paren_expr() {
			return GetRuleContext<Paren_exprContext>(0);
		}
		public AddNoneContext(Add_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterAddNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitAddNone(this);
		}
	}
	public partial class AddAddContext : Add_exprContext {
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public ITerminalNode T_PLUS() { return GetToken(DiceGrammarParser.T_PLUS, 0); }
		public Paren_exprContext paren_expr() {
			return GetRuleContext<Paren_exprContext>(0);
		}
		public AddAddContext(Add_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterAddAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitAddAdd(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		return add_expr(0);
	}

	private Add_exprContext add_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_exprContext _localctx = new Add_exprContext(Context, _parentState);
		Add_exprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_add_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AddNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 67; paren_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 75;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new AddAddContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 69;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 70; Match(T_PLUS);
						State = 71; paren_expr();
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 72;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 73; Match(T_MINUS);
						State = 74; paren_expr();
						}
						break;
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Paren_exprContext : ParserRuleContext {
		public Paren_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren_expr; } }
	 
		public Paren_exprContext() { }
		public virtual void CopyFrom(Paren_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenNumberContext : Paren_exprContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ParenNumberContext(Paren_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterParenNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitParenNumber(this);
		}
	}
	public partial class ParenParenContext : Paren_exprContext {
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public ParenParenContext(Paren_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterParenParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitParenParen(this);
		}
	}
	public partial class ParenGroupContext : Paren_exprContext {
		public Grouped_rollContext grouped_roll() {
			return GetRuleContext<Grouped_rollContext>(0);
		}
		public ParenGroupContext(Paren_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterParenGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitParenGroup(this);
		}
	}

	[RuleVersion(0)]
	public Paren_exprContext paren_expr() {
		Paren_exprContext _localctx = new Paren_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_paren_expr);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ParenParenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(T_LPAREN);
				State = 81; math_expr();
				State = 82; Match(T_RPAREN);
				}
				break;
			case 2:
				_localctx = new ParenNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; number();
				}
				break;
			case 3:
				_localctx = new ParenGroupContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; grouped_roll();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_exprContext : ParserRuleContext {
		public Number_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_expr; } }
	 
		public Number_exprContext() { }
		public virtual void CopyFrom(Number_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NexprParenContext : Number_exprContext {
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public NexprParenContext(Number_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterNexprParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitNexprParen(this);
		}
	}
	public partial class NexprNumberContext : Number_exprContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NexprNumberContext(Number_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterNexprNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitNexprNumber(this);
		}
	}

	[RuleVersion(0)]
	public Number_exprContext number_expr() {
		Number_exprContext _localctx = new Number_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_number_expr);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_LPAREN:
				_localctx = new NexprParenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(T_LPAREN);
				State = 89; math_expr();
				State = 90; Match(T_RPAREN);
				}
				break;
			case T_DIGIT_STRING:
			case T_LSQUARE:
			case T_MINUS:
				_localctx = new NexprNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberMacroContext : NumberContext {
		public ITerminalNode T_LSQUARE() { return GetToken(DiceGrammarParser.T_LSQUARE, 0); }
		public ITerminalNode T_STRING() { return GetToken(DiceGrammarParser.T_STRING, 0); }
		public ITerminalNode T_RSQUARE() { return GetToken(DiceGrammarParser.T_RSQUARE, 0); }
		public NumberMacroContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterNumberMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitNumberMacro(this);
		}
	}
	public partial class NumberLiteralContext : NumberContext {
		public ITerminalNode T_DIGIT_STRING() { return GetToken(DiceGrammarParser.T_DIGIT_STRING, 0); }
		public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		public NumberLiteralContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		int _la;
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_DIGIT_STRING:
			case T_MINUS:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T_MINUS) {
					{
					State = 95; Match(T_MINUS);
					}
				}

				State = 98; Match(T_DIGIT_STRING);
				}
				break;
			case T_LSQUARE:
				_localctx = new NumberMacroContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; Match(T_LSQUARE);
				State = 100; Match(T_STRING);
				State = 101; Match(T_RSQUARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_functionContext : ParserRuleContext {
		public ITerminalNode T_ALPHA_STRING() { return GetToken(DiceGrammarParser.T_ALPHA_STRING, 0); }
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public ITerminalNode T_STRING() { return GetToken(DiceGrammarParser.T_STRING, 0); }
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public Global_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGlobal_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGlobal_function(this);
		}
	}

	[RuleVersion(0)]
	public Global_functionContext global_function() {
		Global_functionContext _localctx = new Global_functionContext(Context, State);
		EnterRule(_localctx, 14, RULE_global_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T_ALPHA_STRING);
			State = 105; Match(T_LPAREN);
			State = 106; Match(T_STRING);
			State = 107; Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_functionContext : ParserRuleContext {
		public ITerminalNode T_DOT() { return GetToken(DiceGrammarParser.T_DOT, 0); }
		public ITerminalNode T_ALPHA_STRING() { return GetToken(DiceGrammarParser.T_ALPHA_STRING, 0); }
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public ITerminalNode T_STRING() { return GetToken(DiceGrammarParser.T_STRING, 0); }
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public Group_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroup_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroup_function(this);
		}
	}

	[RuleVersion(0)]
	public Group_functionContext group_function() {
		Group_functionContext _localctx = new Group_functionContext(Context, State);
		EnterRule(_localctx, 16, RULE_group_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(T_DOT);
			State = 110; Match(T_ALPHA_STRING);
			State = 111; Match(T_LPAREN);
			State = 112; Match(T_STRING);
			State = 113; Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_functionContext : ParserRuleContext {
		public ITerminalNode T_DOT() { return GetToken(DiceGrammarParser.T_DOT, 0); }
		public ITerminalNode T_ALPHA_STRING() { return GetToken(DiceGrammarParser.T_ALPHA_STRING, 0); }
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public ITerminalNode T_STRING() { return GetToken(DiceGrammarParser.T_STRING, 0); }
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public Basic_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasic_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasic_function(this);
		}
	}

	[RuleVersion(0)]
	public Basic_functionContext basic_function() {
		Basic_functionContext _localctx = new Basic_functionContext(Context, State);
		EnterRule(_localctx, 18, RULE_basic_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T_DOT);
			State = 116; Match(T_ALPHA_STRING);
			State = 117; Match(T_LPAREN);
			State = 118; Match(T_STRING);
			State = 119; Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_rollContext : ParserRuleContext {
		public Grouped_rollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_roll; } }
	 
		public Grouped_rollContext() { }
		public virtual void CopyFrom(Grouped_rollContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupGroupContext : Grouped_rollContext {
		public ITerminalNode T_LBRACE() { return GetToken(DiceGrammarParser.T_LBRACE, 0); }
		public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		public ITerminalNode T_RBRACE() { return GetToken(DiceGrammarParser.T_RBRACE, 0); }
		public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public Grouped_extrasContext[] grouped_extras() {
			return GetRuleContexts<Grouped_extrasContext>();
		}
		public Grouped_extrasContext grouped_extras(int i) {
			return GetRuleContext<Grouped_extrasContext>(i);
		}
		public Group_functionContext[] group_function() {
			return GetRuleContexts<Group_functionContext>();
		}
		public Group_functionContext group_function(int i) {
			return GetRuleContext<Group_functionContext>(i);
		}
		public GroupGroupContext(Grouped_rollContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupGroup(this);
		}
	}
	public partial class GroupBasicContext : Grouped_rollContext {
		public Basic_rollContext basic_roll() {
			return GetRuleContext<Basic_rollContext>(0);
		}
		public GroupBasicContext(Grouped_rollContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupBasic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupBasic(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_rollContext grouped_roll() {
		Grouped_rollContext _localctx = new Grouped_rollContext(Context, State);
		EnterRule(_localctx, 20, RULE_grouped_roll);
		int _la;
		try {
			int _alt;
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new GroupGroupContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_DIGIT_STRING) | (1L << T_LSQUARE) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 121; number_expr();
					}
				}

				State = 124; Match(T_LBRACE);
				State = 125; grouped_roll_inner(0);
				State = 126; Match(T_RBRACE);
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 127; grouped_extras();
						}
						} 
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 133; group_function();
						}
						} 
					}
					State = 138;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
				break;
			case 2:
				_localctx = new GroupBasicContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; basic_roll();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_roll_innerContext : ParserRuleContext {
		public Grouped_roll_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_roll_inner; } }
	 
		public Grouped_roll_innerContext() { }
		public virtual void CopyFrom(Grouped_roll_innerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupInitContext : Grouped_roll_innerContext {
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupInitContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupInit(this);
		}
	}
	public partial class GroupExtraContext : Grouped_roll_innerContext {
		public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		public ITerminalNode T_COMMA() { return GetToken(DiceGrammarParser.T_COMMA, 0); }
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupExtraContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupExtra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupExtra(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_roll_innerContext grouped_roll_inner() {
		return grouped_roll_inner(0);
	}

	private Grouped_roll_innerContext grouped_roll_inner(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Grouped_roll_innerContext _localctx = new Grouped_roll_innerContext(Context, _parentState);
		Grouped_roll_innerContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_grouped_roll_inner, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new GroupInitContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 143; math_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GroupExtraContext(new Grouped_roll_innerContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_grouped_roll_inner);
					State = 145;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 146; Match(T_COMMA);
					State = 147; math_expr();
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Grouped_extrasContext : ParserRuleContext {
		public Grouped_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_extras; } }
	 
		public Grouped_extrasContext() { }
		public virtual void CopyFrom(Grouped_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupSortContext : Grouped_extrasContext {
		public Sort_exprContext sort_expr() {
			return GetRuleContext<Sort_exprContext>(0);
		}
		public GroupSortContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupSort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupSort(this);
		}
	}
	public partial class GroupSuccessContext : Grouped_extrasContext {
		public Success_exprContext success_expr() {
			return GetRuleContext<Success_exprContext>(0);
		}
		public GroupSuccessContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupSuccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupSuccess(this);
		}
	}
	public partial class GroupKeepContext : Grouped_extrasContext {
		public Keep_exprContext keep_expr() {
			return GetRuleContext<Keep_exprContext>(0);
		}
		public GroupKeepContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGroupKeep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGroupKeep(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_extrasContext grouped_extras() {
		Grouped_extrasContext _localctx = new Grouped_extrasContext(Context, State);
		EnterRule(_localctx, 24, RULE_grouped_extras);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_KEEP_HIGH:
			case T_KEEP_LOW:
			case T_DROP_HIGH:
			case T_DROP_LOW:
			case T_ADVANTAGE:
			case T_DISADVANTAGE:
				_localctx = new GroupKeepContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; keep_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new GroupSuccessContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; success_expr();
				}
				break;
			case T_SORT_ASC:
			case T_SORT_DESC:
				_localctx = new GroupSortContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 155; sort_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_rollContext : ParserRuleContext {
		public Basic_rollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_roll; } }
	 
		public Basic_rollContext() { }
		public virtual void CopyFrom(Basic_rollContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicBasicContext : Basic_rollContext {
		public Number_exprContext[] number_expr() {
			return GetRuleContexts<Number_exprContext>();
		}
		public Number_exprContext number_expr(int i) {
			return GetRuleContext<Number_exprContext>(i);
		}
		public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public BasicBasicContext(Basic_rollContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicBasic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicBasic(this);
		}
	}
	public partial class BasicFudgeContext : Basic_rollContext {
		public Number_exprContext[] number_expr() {
			return GetRuleContexts<Number_exprContext>();
		}
		public Number_exprContext number_expr(int i) {
			return GetRuleContext<Number_exprContext>(i);
		}
		public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		public ITerminalNode T_FUDGE() { return GetToken(DiceGrammarParser.T_FUDGE, 0); }
		public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public BasicFudgeContext(Basic_rollContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicFudge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicFudge(this);
		}
	}

	[RuleVersion(0)]
	public Basic_rollContext basic_roll() {
		Basic_rollContext _localctx = new Basic_rollContext(Context, State);
		EnterRule(_localctx, 26, RULE_basic_roll);
		try {
			int _alt;
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new BasicBasicContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; number_expr();
				State = 159; Match(T_D);
				State = 160; number_expr();
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 161; basic_extras();
						}
						} 
					}
					State = 166;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 167; basic_function();
						}
						} 
					}
					State = 172;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				}
				break;
			case 2:
				_localctx = new BasicFudgeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; number_expr();
				State = 174; Match(T_D);
				State = 175; Match(T_FUDGE);
				State = 177;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 176; number_expr();
					}
					break;
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 179; basic_extras();
						}
						} 
					}
					State = 184;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 185; basic_function();
						}
						} 
					}
					State = 190;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_extrasContext : ParserRuleContext {
		public Basic_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_extras; } }
	 
		public Basic_extrasContext() { }
		public virtual void CopyFrom(Basic_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicRerollContext : Basic_extrasContext {
		public Reroll_exprContext reroll_expr() {
			return GetRuleContext<Reroll_exprContext>(0);
		}
		public BasicRerollContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicReroll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicReroll(this);
		}
	}
	public partial class BasicSuccessContext : Basic_extrasContext {
		public Success_exprContext success_expr() {
			return GetRuleContext<Success_exprContext>(0);
		}
		public BasicSuccessContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicSuccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicSuccess(this);
		}
	}
	public partial class BasicKeepContext : Basic_extrasContext {
		public Keep_exprContext keep_expr() {
			return GetRuleContext<Keep_exprContext>(0);
		}
		public BasicKeepContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicKeep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicKeep(this);
		}
	}
	public partial class BasicSortContext : Basic_extrasContext {
		public Sort_exprContext sort_expr() {
			return GetRuleContext<Sort_exprContext>(0);
		}
		public BasicSortContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicSort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicSort(this);
		}
	}
	public partial class BasicExplodeContext : Basic_extrasContext {
		public Explode_exprContext explode_expr() {
			return GetRuleContext<Explode_exprContext>(0);
		}
		public BasicExplodeContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicExplode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicExplode(this);
		}
	}
	public partial class BasicCritContext : Basic_extrasContext {
		public Crit_exprContext crit_expr() {
			return GetRuleContext<Crit_exprContext>(0);
		}
		public BasicCritContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterBasicCrit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitBasicCrit(this);
		}
	}

	[RuleVersion(0)]
	public Basic_extrasContext basic_extras() {
		Basic_extrasContext _localctx = new Basic_extrasContext(Context, State);
		EnterRule(_localctx, 28, RULE_basic_extras);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_REROLL:
			case T_REROLL_ONCE:
				_localctx = new BasicRerollContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; reroll_expr();
				}
				break;
			case T_EXPLODE:
			case T_COMPOUND:
			case T_PENETRATE:
				_localctx = new BasicExplodeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; explode_expr();
				}
				break;
			case T_KEEP_HIGH:
			case T_KEEP_LOW:
			case T_DROP_HIGH:
			case T_DROP_LOW:
			case T_ADVANTAGE:
			case T_DISADVANTAGE:
				_localctx = new BasicKeepContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 195; keep_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new BasicSuccessContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 196; success_expr();
				}
				break;
			case T_SORT_ASC:
			case T_SORT_DESC:
				_localctx = new BasicSortContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 197; sort_expr();
				}
				break;
			case T_CRIT:
				_localctx = new BasicCritContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 198; crit_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keep_exprContext : ParserRuleContext {
		public Keep_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keep_expr; } }
	 
		public Keep_exprContext() { }
		public virtual void CopyFrom(Keep_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeepHighContext : Keep_exprContext {
		public ITerminalNode T_KEEP_HIGH() { return GetToken(DiceGrammarParser.T_KEEP_HIGH, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public KeepHighContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterKeepHigh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitKeepHigh(this);
		}
	}
	public partial class AdvantageContext : Keep_exprContext {
		public ITerminalNode T_ADVANTAGE() { return GetToken(DiceGrammarParser.T_ADVANTAGE, 0); }
		public AdvantageContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterAdvantage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitAdvantage(this);
		}
	}
	public partial class DropLowContext : Keep_exprContext {
		public ITerminalNode T_DROP_LOW() { return GetToken(DiceGrammarParser.T_DROP_LOW, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public DropLowContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterDropLow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitDropLow(this);
		}
	}
	public partial class DisadvantageContext : Keep_exprContext {
		public ITerminalNode T_DISADVANTAGE() { return GetToken(DiceGrammarParser.T_DISADVANTAGE, 0); }
		public DisadvantageContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterDisadvantage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitDisadvantage(this);
		}
	}
	public partial class DropHighContext : Keep_exprContext {
		public ITerminalNode T_DROP_HIGH() { return GetToken(DiceGrammarParser.T_DROP_HIGH, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public DropHighContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterDropHigh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitDropHigh(this);
		}
	}
	public partial class KeepLowContext : Keep_exprContext {
		public ITerminalNode T_KEEP_LOW() { return GetToken(DiceGrammarParser.T_KEEP_LOW, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public KeepLowContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterKeepLow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitKeepLow(this);
		}
	}

	[RuleVersion(0)]
	public Keep_exprContext keep_expr() {
		Keep_exprContext _localctx = new Keep_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_keep_expr);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_KEEP_HIGH:
				_localctx = new KeepHighContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(T_KEEP_HIGH);
				State = 202; number();
				}
				break;
			case T_KEEP_LOW:
				_localctx = new KeepLowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; Match(T_KEEP_LOW);
				State = 204; number();
				}
				break;
			case T_DROP_HIGH:
				_localctx = new DropHighContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 205; Match(T_DROP_HIGH);
				State = 206; number();
				}
				break;
			case T_DROP_LOW:
				_localctx = new DropLowContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 207; Match(T_DROP_LOW);
				State = 208; number();
				}
				break;
			case T_ADVANTAGE:
				_localctx = new AdvantageContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 209; Match(T_ADVANTAGE);
				}
				break;
			case T_DISADVANTAGE:
				_localctx = new DisadvantageContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 210; Match(T_DISADVANTAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reroll_exprContext : ParserRuleContext {
		public Reroll_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reroll_expr; } }
	 
		public Reroll_exprContext() { }
		public virtual void CopyFrom(Reroll_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RerollOnceContext : Reroll_exprContext {
		public ITerminalNode T_REROLL_ONCE() { return GetToken(DiceGrammarParser.T_REROLL_ONCE, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public RerollOnceContext(Reroll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterRerollOnce(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitRerollOnce(this);
		}
	}
	public partial class RerollRerollContext : Reroll_exprContext {
		public ITerminalNode T_REROLL() { return GetToken(DiceGrammarParser.T_REROLL, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public RerollRerollContext(Reroll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterRerollReroll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitRerollReroll(this);
		}
	}

	[RuleVersion(0)]
	public Reroll_exprContext reroll_expr() {
		Reroll_exprContext _localctx = new Reroll_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_reroll_expr);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_REROLL:
				_localctx = new RerollRerollContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; Match(T_REROLL);
				State = 214; compare_expr();
				}
				break;
			case T_REROLL_ONCE:
				_localctx = new RerollOnceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; Match(T_REROLL_ONCE);
				State = 216; compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explode_exprContext : ParserRuleContext {
		public Explode_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explode_expr; } }
	 
		public Explode_exprContext() { }
		public virtual void CopyFrom(Explode_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PenetrateContext : Explode_exprContext {
		public ITerminalNode T_PENETRATE() { return GetToken(DiceGrammarParser.T_PENETRATE, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public PenetrateContext(Explode_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterPenetrate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitPenetrate(this);
		}
	}
	public partial class ExplodeContext : Explode_exprContext {
		public ITerminalNode T_EXPLODE() { return GetToken(DiceGrammarParser.T_EXPLODE, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public ExplodeContext(Explode_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterExplode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitExplode(this);
		}
	}
	public partial class CompoundContext : Explode_exprContext {
		public ITerminalNode T_COMPOUND() { return GetToken(DiceGrammarParser.T_COMPOUND, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public CompoundContext(Explode_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterCompound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitCompound(this);
		}
	}

	[RuleVersion(0)]
	public Explode_exprContext explode_expr() {
		Explode_exprContext _localctx = new Explode_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_explode_expr);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EXPLODE:
				_localctx = new ExplodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 219; Match(T_EXPLODE);
				State = 221;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 220; compare_expr();
					}
					break;
				}
				}
				break;
			case T_COMPOUND:
				_localctx = new CompoundContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; Match(T_COMPOUND);
				State = 225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 224; compare_expr();
					}
					break;
				}
				}
				break;
			case T_PENETRATE:
				_localctx = new PenetrateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 227; Match(T_PENETRATE);
				State = 229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 228; compare_expr();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Success_exprContext : ParserRuleContext {
		public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public ITerminalNode T_FAIL() { return GetToken(DiceGrammarParser.T_FAIL, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public Success_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_success_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterSuccess_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitSuccess_expr(this);
		}
	}

	[RuleVersion(0)]
	public Success_exprContext success_expr() {
		Success_exprContext _localctx = new Success_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_success_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; explicit_compare_expr();
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 234; Match(T_FAIL);
				State = 235; compare_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_exprContext : ParserRuleContext {
		public Compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_expr; } }
	 
		public Compare_exprContext() { }
		public virtual void CopyFrom(Compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompImplicitContext : Compare_exprContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public CompImplicitContext(Compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterCompImplicit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitCompImplicit(this);
		}
	}
	public partial class CompExplicitContext : Compare_exprContext {
		public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public CompExplicitContext(Compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterCompExplicit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitCompExplicit(this);
		}
	}

	[RuleVersion(0)]
	public Compare_exprContext compare_expr() {
		Compare_exprContext _localctx = new Compare_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_compare_expr);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_DIGIT_STRING:
			case T_LSQUARE:
			case T_MINUS:
				_localctx = new CompImplicitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; number();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new CompExplicitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_compare_exprContext : ParserRuleContext {
		public Explicit_compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_compare_expr; } }
	 
		public Explicit_compare_exprContext() { }
		public virtual void CopyFrom(Explicit_compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_EQUALS() { return GetToken(DiceGrammarParser.T_EQUALS, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
	}
	public partial class GreaterEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_GREATER_EQUALS() { return GetToken(DiceGrammarParser.T_GREATER_EQUALS, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public GreaterEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGreaterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGreaterEquals(this);
		}
	}
	public partial class LessEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_LESS_EQUALS() { return GetToken(DiceGrammarParser.T_LESS_EQUALS, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public LessEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterLessEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitLessEquals(this);
		}
	}
	public partial class GreaterContext : Explicit_compare_exprContext {
		public ITerminalNode T_GREATER() { return GetToken(DiceGrammarParser.T_GREATER, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public GreaterContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterGreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitGreater(this);
		}
	}
	public partial class LessContext : Explicit_compare_exprContext {
		public ITerminalNode T_LESS() { return GetToken(DiceGrammarParser.T_LESS, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public LessContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterLess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitLess(this);
		}
	}
	public partial class NotEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_NOT_EQUALS() { return GetToken(DiceGrammarParser.T_NOT_EQUALS, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NotEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterNotEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitNotEquals(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_compare_exprContext explicit_compare_expr() {
		Explicit_compare_exprContext _localctx = new Explicit_compare_exprContext(Context, State);
		EnterRule(_localctx, 40, RULE_explicit_compare_expr);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EQUALS:
				_localctx = new EqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; Match(T_EQUALS);
				State = 243; number();
				}
				break;
			case T_GREATER:
				_localctx = new GreaterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; Match(T_GREATER);
				State = 245; number();
				}
				break;
			case T_LESS:
				_localctx = new LessContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 246; Match(T_LESS);
				State = 247; number();
				}
				break;
			case T_GREATER_EQUALS:
				_localctx = new GreaterEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 248; Match(T_GREATER_EQUALS);
				State = 249; number();
				}
				break;
			case T_LESS_EQUALS:
				_localctx = new LessEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 250; Match(T_LESS_EQUALS);
				State = 251; number();
				}
				break;
			case T_NOT_EQUALS:
				_localctx = new NotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 252; Match(T_NOT_EQUALS);
				State = 253; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_exprContext : ParserRuleContext {
		public Sort_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_expr; } }
	 
		public Sort_exprContext() { }
		public virtual void CopyFrom(Sort_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SortAscContext : Sort_exprContext {
		public ITerminalNode T_SORT_ASC() { return GetToken(DiceGrammarParser.T_SORT_ASC, 0); }
		public SortAscContext(Sort_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterSortAsc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitSortAsc(this);
		}
	}
	public partial class SortDescContext : Sort_exprContext {
		public ITerminalNode T_SORT_DESC() { return GetToken(DiceGrammarParser.T_SORT_DESC, 0); }
		public SortDescContext(Sort_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterSortDesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitSortDesc(this);
		}
	}

	[RuleVersion(0)]
	public Sort_exprContext sort_expr() {
		Sort_exprContext _localctx = new Sort_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_sort_expr);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_SORT_ASC:
				_localctx = new SortAscContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; Match(T_SORT_ASC);
				}
				break;
			case T_SORT_DESC:
				_localctx = new SortDescContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; Match(T_SORT_DESC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Crit_exprContext : ParserRuleContext {
		public ITerminalNode T_CRIT() { return GetToken(DiceGrammarParser.T_CRIT, 0); }
		public Compare_exprContext[] compare_expr() {
			return GetRuleContexts<Compare_exprContext>();
		}
		public Compare_exprContext compare_expr(int i) {
			return GetRuleContext<Compare_exprContext>(i);
		}
		public ITerminalNode T_FAIL() { return GetToken(DiceGrammarParser.T_FAIL, 0); }
		public Crit_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crit_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.EnterCrit_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarListener typedListener = listener as IDiceGrammarListener;
			if (typedListener != null) typedListener.ExitCrit_expr(this);
		}
	}

	[RuleVersion(0)]
	public Crit_exprContext crit_expr() {
		Crit_exprContext _localctx = new Crit_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_crit_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(T_CRIT);
			State = 261; compare_expr();
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 262; Match(T_FAIL);
				State = 263; compare_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return mult_expr_sempred((Mult_exprContext)_localctx, predIndex);
		case 3: return add_expr_sempred((Add_exprContext)_localctx, predIndex);
		case 11: return grouped_roll_inner_sempred((Grouped_roll_innerContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mult_expr_sempred(Mult_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool add_expr_sempred(Add_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool grouped_roll_inner_sempred(Grouped_roll_innerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\x10D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x35', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '@', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x43', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', 'N', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'Q', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'Y', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '`', '\n', '\a', 
		'\x3', '\b', '\x5', '\b', '\x63', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'i', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x5', '\f', '}', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x83', '\n', '\f', '\f', '\f', '\xE', '\f', '\x86', 
		'\v', '\f', '\x3', '\f', '\a', '\f', '\x89', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\x8C', '\v', '\f', '\x3', '\f', '\x5', '\f', '\x8F', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x97', '\n', '\r', '\f', '\r', '\xE', '\r', '\x9A', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x9F', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', 
		'\xF', '\xA5', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xA8', '\v', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\xAB', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\xAE', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xB4', '\n', '\xF', '\x3', '\xF', '\a', '\xF', '\xB7', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xBA', '\v', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xBD', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC0', '\v', 
		'\xF', '\x5', '\xF', '\xC2', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xCA', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xD6', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xDC', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE0', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE4', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xE8', '\n', '\x13', '\x5', '\x13', 
		'\xEA', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xEF', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\xF3', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x101', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x105', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x10B', '\n', '\x18', '\x3', '\x18', '\x2', '\x5', '\x6', '\b', 
		'\x18', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x2', '\x2', '\x2', '\x125', '\x2', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x36', '\x3', '\x2', '\x2', '\x2', '\b', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'X', '\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'h', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'o', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', ' ', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xDB', '\x3', '\x2', '\x2', '\x2', '$', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xEB', '\x3', '\x2', '\x2', '\x2', '(', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x100', '\x3', '\x2', '\x2', '\x2', ',', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\x5', '\x4', '\x3', '\x2', '\x31', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x35', '\x5', '\x6', '\x4', '\x2', '\x33', '\x35', 
		'\x5', '\x10', '\t', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\b', '\x4', '\x1', '\x2', '\x37', '\x38', 
		'\x5', '\b', '\x5', '\x2', '\x38', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\f', '\x5', '\x2', '\x2', ':', ';', '\a', '\'', '\x2', '\x2', 
		';', '@', '\x5', '\b', '\x5', '\x2', '<', '=', '\f', '\x4', '\x2', '\x2', 
		'=', '>', '\a', '(', '\x2', '\x2', '>', '@', '\x5', '\b', '\x5', '\x2', 
		'?', '\x39', '\x3', '\x2', '\x2', '\x2', '?', '<', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\b', '\x5', '\x1', '\x2', '\x45', '\x46', '\x5', '\n', 
		'\x6', '\x2', '\x46', 'O', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\f', 
		'\x5', '\x2', '\x2', 'H', 'I', '\a', '%', '\x2', '\x2', 'I', 'N', '\x5', 
		'\n', '\x6', '\x2', 'J', 'K', '\f', '\x4', '\x2', '\x2', 'K', 'L', '\a', 
		'&', '\x2', '\x2', 'L', 'N', '\x5', '\n', '\x6', '\x2', 'M', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'P', '\t', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '#', '\x2', '\x2', 'S', 'T', 
		'\x5', '\x4', '\x3', '\x2', 'T', 'U', '\a', '$', '\x2', '\x2', 'U', 'Y', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x5', '\xE', '\b', '\x2', 'W', 
		'Y', '\x5', '\x16', '\f', '\x2', 'X', 'R', '\x3', '\x2', '\x2', '\x2', 
		'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\v', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '#', '\x2', '\x2', 
		'[', '\\', '\x5', '\x4', '\x3', '\x2', '\\', ']', '\a', '$', '\x2', '\x2', 
		']', '`', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x5', '\xE', '\b', '\x2', 
		'_', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '\r', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\a', '&', '\x2', 
		'\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'i', '\a', '\x3', '\x2', '\x2', '\x65', '\x66', '\a', '\x1F', '\x2', '\x2', 
		'\x66', 'g', '\a', '\x5', '\x2', '\x2', 'g', 'i', '\a', ' ', '\x2', '\x2', 
		'h', '\x62', '\x3', '\x2', '\x2', '\x2', 'h', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'i', '\xF', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x4', 
		'\x2', '\x2', 'k', 'l', '\a', '#', '\x2', '\x2', 'l', 'm', '\a', '\x5', 
		'\x2', '\x2', 'm', 'n', '\a', '$', '\x2', '\x2', 'n', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\a', '\"', '\x2', '\x2', 'p', 'q', '\a', '\x4', 
		'\x2', '\x2', 'q', 'r', '\a', '#', '\x2', '\x2', 'r', 's', '\a', '\x5', 
		'\x2', '\x2', 's', 't', '\a', '$', '\x2', '\x2', 't', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\"', '\x2', '\x2', 'v', 'w', '\a', '\x4', 
		'\x2', '\x2', 'w', 'x', '\a', '#', '\x2', '\x2', 'x', 'y', '\a', '\x5', 
		'\x2', '\x2', 'y', 'z', '\a', '$', '\x2', '\x2', 'z', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '{', '}', '\x5', '\f', '\a', '\x2', '|', '{', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\x1D', '\x2', '\x2', '\x7F', '\x80', 
		'\x5', '\x18', '\r', '\x2', '\x80', '\x84', '\a', '\x1E', '\x2', '\x2', 
		'\x81', '\x83', '\x5', '\x1A', '\xE', '\x2', '\x82', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x89', '\x5', '\x12', '\n', '\x2', '\x88', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x1C', '\xF', '\x2', 
		'\x8E', '|', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\b', '\r', '\x1', '\x2', '\x91', '\x92', '\x5', '\x4', '\x3', '\x2', 
		'\x92', '\x98', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\f', '\x4', 
		'\x2', '\x2', '\x94', '\x95', '\a', '!', '\x2', '\x2', '\x95', '\x97', 
		'\x5', '\x4', '\x3', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x9F', '\x5', ' ', '\x11', '\x2', '\x9C', '\x9F', '\x5', '&', 
		'\x14', '\x2', '\x9D', '\x9F', '\x5', ',', '\x17', '\x2', '\x9E', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\x5', '\f', '\a', '\x2', '\xA1', '\xA2', 
		'\a', '\x6', '\x2', '\x2', '\xA2', '\xA6', '\x5', '\f', '\a', '\x2', '\xA3', 
		'\xA5', '\x5', '\x1E', '\x10', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\x14', '\v', '\x2', '\xAA', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\f', '\a', '\x2', '\xB0', 
		'\xB1', '\a', '\x6', '\x2', '\x2', '\xB1', '\xB3', '\a', '\a', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', '\f', '\a', '\x2', '\xB3', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', '\x5', '\x1E', '\x10', 
		'\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBD', '\x5', 
		'\x14', '\v', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xCA', '\x5', 
		'\"', '\x12', '\x2', '\xC4', '\xCA', '\x5', '$', '\x13', '\x2', '\xC5', 
		'\xCA', '\x5', ' ', '\x11', '\x2', '\xC6', '\xCA', '\x5', '&', '\x14', 
		'\x2', '\xC7', '\xCA', '\x5', ',', '\x17', '\x2', '\xC8', '\xCA', '\x5', 
		'.', '\x18', '\x2', '\xC9', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\b', '\x2', 
		'\x2', '\xCC', '\xD6', '\x5', '\xE', '\b', '\x2', '\xCD', '\xCE', '\a', 
		'\t', '\x2', '\x2', '\xCE', '\xD6', '\x5', '\xE', '\b', '\x2', '\xCF', 
		'\xD0', '\a', '\n', '\x2', '\x2', '\xD0', '\xD6', '\x5', '\xE', '\b', 
		'\x2', '\xD1', '\xD2', '\a', '\v', '\x2', '\x2', '\xD2', '\xD6', '\x5', 
		'\xE', '\b', '\x2', '\xD3', '\xD6', '\a', '\f', '\x2', '\x2', '\xD4', 
		'\xD6', '\a', '\r', '\x2', '\x2', '\xD5', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '!', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', 
		'\xE', '\x2', '\x2', '\xD8', '\xDC', '\x5', '(', '\x15', '\x2', '\xD9', 
		'\xDA', '\a', '\xF', '\x2', '\x2', '\xDA', '\xDC', '\x5', '(', '\x15', 
		'\x2', '\xDB', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '#', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDF', '\a', '\x10', '\x2', '\x2', '\xDE', '\xE0', '\x5', '(', '\x15', 
		'\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE3', '\a', '\x11', '\x2', '\x2', '\xE2', '\xE4', '\x5', '(', '\x15', 
		'\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE7', '\a', '\x12', '\x2', '\x2', '\xE6', '\xE8', '\x5', '(', '\x15', 
		'\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xEA', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEE', '\x5', '*', '\x16', '\x2', '\xEC', 
		'\xED', '\a', '\x14', '\x2', '\x2', '\xED', '\xEF', '\x5', '(', '\x15', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\'', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF3', '\x5', '\xE', '\b', '\x2', '\xF1', '\xF3', '\x5', '*', '\x16', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', ')', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF5', '\a', '\x17', '\x2', '\x2', '\xF5', '\x101', '\x5', '\xE', '\b', 
		'\x2', '\xF6', '\xF7', '\a', '\x18', '\x2', '\x2', '\xF7', '\x101', '\x5', 
		'\xE', '\b', '\x2', '\xF8', '\xF9', '\a', '\x19', '\x2', '\x2', '\xF9', 
		'\x101', '\x5', '\xE', '\b', '\x2', '\xFA', '\xFB', '\a', '\x1A', '\x2', 
		'\x2', '\xFB', '\x101', '\x5', '\xE', '\b', '\x2', '\xFC', '\xFD', '\a', 
		'\x1B', '\x2', '\x2', '\xFD', '\x101', '\x5', '\xE', '\b', '\x2', '\xFE', 
		'\xFF', '\a', '\x1C', '\x2', '\x2', '\xFF', '\x101', '\x5', '\xE', '\b', 
		'\x2', '\x100', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x100', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x105', '\a', '\x15', '\x2', '\x2', '\x103', 
		'\x105', '\a', '\x16', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\a', '\x13', '\x2', '\x2', '\x107', 
		'\x10A', '\x5', '(', '\x15', '\x2', '\x108', '\x109', '\a', '\x14', '\x2', 
		'\x2', '\x109', '\x10B', '\x5', '(', '\x15', '\x2', '\x10A', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '/', '\x3', '\x2', '\x2', '\x2', '#', '\x34', '?', '\x41', 'M', 
		'O', 'X', '_', '\x62', 'h', '|', '\x84', '\x8A', '\x8E', '\x98', '\x9E', 
		'\xA6', '\xAC', '\xB3', '\xB8', '\xBE', '\xC1', '\xC9', '\xD5', '\xDB', 
		'\xDF', '\xE3', '\xE7', '\xE9', '\xEE', '\xF2', '\x100', '\x104', '\x10A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dice.Grammar
