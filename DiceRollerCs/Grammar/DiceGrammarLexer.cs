//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DiceGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_DIGIT_STRING=1, T_ALPHA_STRING=2, T_STRING=3, T_D=4, T_FUDGE=5, T_KEEP_HIGH=6, 
		T_KEEP_LOW=7, T_DROP_HIGH=8, T_DROP_LOW=9, T_ADVANTAGE=10, T_REROLL=11, 
		T_REROLL_ONCE=12, T_EXPLODE=13, T_COMPOUND=14, T_PENETRATE=15, T_FAIL=16, 
		T_EQUALS=17, T_GREATER=18, T_LESS=19, T_GREATER_EQUALS=20, T_LESS_EQUALS=21, 
		T_NOT_EQUALS=22, T_LBRACE=23, T_RBRACE=24, T_LSQUARE=25, T_RSQUARE=26, 
		T_COMMA=27, T_DOT=28, T_LPAREN=29, T_RPAREN=30, T_PLUS=31, T_MINUS=32, 
		T_MULTIPLY=33, T_DIVIDE=34, WS=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T_DIGIT_STRING", "T_ALPHA_STRING", "T_STRING", "T_D", "T_FUDGE", "T_KEEP_HIGH", 
		"T_KEEP_LOW", "T_DROP_HIGH", "T_DROP_LOW", "T_ADVANTAGE", "T_REROLL", 
		"T_REROLL_ONCE", "T_EXPLODE", "T_COMPOUND", "T_PENETRATE", "T_FAIL", "T_EQUALS", 
		"T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", "T_NOT_EQUALS", 
		"T_LBRACE", "T_RBRACE", "T_LSQUARE", "T_RSQUARE", "T_COMMA", "T_DOT", 
		"T_LPAREN", "T_RPAREN", "T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", 
		"WS"
	};


	public DiceGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DiceGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'d'", "'F'", "'kh'", "'kl'", "'dh'", "'dl'", 
		"'a'", "'r'", "'ro'", "'e'", "'c'", "'p'", "'f'", "'='", "'>'", "'<'", 
		"'>='", "'<='", null, "'{'", "'}'", "'['", "']'", "','", "'.'", "'('", 
		"')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_DIGIT_STRING", "T_ALPHA_STRING", "T_STRING", "T_D", "T_FUDGE", 
		"T_KEEP_HIGH", "T_KEEP_LOW", "T_DROP_HIGH", "T_DROP_LOW", "T_ADVANTAGE", 
		"T_REROLL", "T_REROLL_ONCE", "T_EXPLODE", "T_COMPOUND", "T_PENETRATE", 
		"T_FAIL", "T_EQUALS", "T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", 
		"T_NOT_EQUALS", "T_LBRACE", "T_RBRACE", "T_LSQUARE", "T_RSQUARE", "T_COMMA", 
		"T_DOT", "T_LPAREN", "T_RPAREN", "T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiceGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DiceGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '%', '\xA7', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x6', '\x2', 'K', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', 'L', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', 'Q', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'T', '\v', '\x3', 
		'\x3', '\x4', '\x6', '\x4', 'W', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'X', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x8A', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', '\x2', '%', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', 
		'#', '\x13', '%', '\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '-', 
		'\x18', '/', '\x19', '\x31', '\x1A', '\x33', '\x1B', '\x35', '\x1C', '\x37', 
		'\x1D', '\x39', '\x1E', ';', '\x1F', '=', ' ', '?', '!', '\x41', '\"', 
		'\x43', '#', '\x45', '$', 'G', '%', '\x3', '\x2', '\a', '\x3', '\x2', 
		'\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\x32', 
		';', '\x43', '\\', '\x63', '|', '\a', '\x2', '*', '+', ']', ']', '_', 
		'_', '}', '}', '\x7F', '\x7F', '\f', '\x2', '\v', '\xF', '\"', '\"', '\x87', 
		'\x87', '\xA2', '\xA2', '\x1682', '\x1682', '\x2002', '\x200C', '\x202A', 
		'\x202B', '\x2031', '\x2031', '\x2061', '\x2061', '\x3002', '\x3002', 
		'\x2', '\xAA', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x2', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x2', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x2', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x2', ';', '\x3', '\x2', '\x2', '\x2', '\x2', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '?', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x2', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x45', '\x3', '\x2', '\x2', '\x2', '\x2', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x3', 'J', '\x3', '\x2', '\x2', '\x2', '\x5', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\a', 'V', '\x3', '\x2', '\x2', '\x2', '\t', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\\', '\x3', '\x2', '\x2', '\x2', '\r', 
		'^', '\x3', '\x2', '\x2', '\x2', '\xF', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x64', '\x3', '\x2', '\x2', '\x2', '\x13', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x15', 'j', '\x3', '\x2', '\x2', '\x2', '\x17', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x19', 'n', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x1D', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', 'u', '\x3', '\x2', '\x2', '\x2', '!', 'w', '\x3', '\x2', '\x2', 
		'\x2', '#', 'y', '\x3', '\x2', '\x2', '\x2', '%', '{', '\x3', '\x2', '\x2', 
		'\x2', '\'', '}', '\x3', '\x2', '\x2', '\x2', ')', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '+', '\x82', '\x3', '\x2', '\x2', '\x2', '-', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x33', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x91', '\x3', '\x2', '\x2', '\x2', '\x37', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x95', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '=', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x41', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', 'G', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'K', '\t', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', '\x4', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'R', '\t', '\x3', '\x2', '\x2', 'O', 'Q', '\t', '\x4', 
		'\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'S', '\x6', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'W', '\n', '\x5', '\x2', '\x2', 'V', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\b', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x66', '\x2', '\x2', '[', 
		'\n', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', 'H', '\x2', '\x2', 
		']', '\f', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 'm', '\x2', '\x2', 
		'_', '`', '\a', 'j', '\x2', '\x2', '`', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\a', 'm', '\x2', '\x2', '\x62', '\x63', '\a', 'n', '\x2', 
		'\x2', '\x63', '\x10', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x66', '\x2', '\x2', '\x65', '\x66', '\a', 'j', '\x2', '\x2', '\x66', 
		'\x12', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\x66', '\x2', '\x2', 
		'h', 'i', '\a', 'n', '\x2', '\x2', 'i', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x63', '\x2', '\x2', 'k', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', 't', '\x2', '\x2', 'm', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', 't', '\x2', '\x2', 'o', 'p', '\a', 'q', '\x2', 
		'\x2', 'p', '\x1A', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', 'g', '\x2', 
		'\x2', 'r', '\x1C', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x65', 
		'\x2', '\x2', 't', '\x1E', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 
		'r', '\x2', '\x2', 'v', ' ', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', 
		'h', '\x2', '\x2', 'x', '\"', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', 
		'?', '\x2', '\x2', 'z', '$', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', 
		'@', '\x2', '\x2', '|', '&', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', 
		'>', '\x2', '\x2', '~', '(', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '@', '\x2', '\x2', '\x80', '\x81', '\a', '?', '\x2', '\x2', '\x81', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '>', '\x2', '\x2', 
		'\x83', '\x84', '\a', '?', '\x2', '\x2', '\x84', ',', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\a', '#', '\x2', '\x2', '\x86', '\x8A', '\a', 
		'?', '\x2', '\x2', '\x87', '\x88', '\a', '>', '\x2', '\x2', '\x88', '\x8A', 
		'\a', '@', '\x2', '\x2', '\x89', '\x85', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', '}', '\x2', '\x2', '\x8C', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x7F', '\x2', '\x2', '\x8E', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', ']', '\x2', 
		'\x2', '\x90', '\x34', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', 
		'_', '\x2', '\x2', '\x92', '\x36', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '.', '\x2', '\x2', '\x94', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\a', '\x30', '\x2', '\x2', '\x96', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\a', '*', '\x2', '\x2', '\x98', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '+', '\x2', '\x2', 
		'\x9A', '>', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '-', '\x2', 
		'\x2', '\x9C', '@', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'/', '\x2', '\x2', '\x9E', '\x42', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', ',', '\x2', '\x2', '\xA0', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x31', '\x2', '\x2', '\xA2', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\t', '\x6', '\x2', '\x2', '\xA4', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\b', '$', '\x2', 
		'\x2', '\xA6', 'H', '\x3', '\x2', '\x2', '\x2', '\a', '\x2', 'L', 'R', 
		'X', '\x89', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dice.Grammar
