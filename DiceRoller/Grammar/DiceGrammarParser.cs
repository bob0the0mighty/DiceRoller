//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammarParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DiceGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_DOT_IDENTIFIER=1, T_GLOBAL_IDENTIFIER=2, T_NUMBER=3, T_MACRO=4, T_EQUALS=5, 
		T_GREATER=6, T_LESS=7, T_GREATER_EQUALS=8, T_LESS_EQUALS=9, T_NOT_EQUALS=10, 
		T_LPAREN=11, T_RPAREN=12, T_LBRACE=13, T_RBRACE=14, T_COMMA=15, T_PLUS=16, 
		T_MINUS=17, T_MULTIPLY=18, T_DIVIDE=19, T_D=20, WS=21, T_FUDGE=22, T_EXTRA_IDENTIFIER=23, 
		AN_WS=24, AB_FUNCTION=25;
	public const int
		RULE_input = 0, RULE_math_expr = 1, RULE_add_expr = 2, RULE_mult_expr = 3, 
		RULE_roll_expr = 4, RULE_func_expr = 5, RULE_unary_expr = 6, RULE_number_expr = 7, 
		RULE_number = 8, RULE_global_function = 9, RULE_group_function = 10, RULE_basic_function = 11, 
		RULE_function_arg = 12, RULE_grouped_roll_inner = 13, RULE_grouped_extras = 14, 
		RULE_basic_extras = 15, RULE_compare_expr = 16, RULE_explicit_compare_expr = 17;
	public static readonly string[] ruleNames = {
		"input", "math_expr", "add_expr", "mult_expr", "roll_expr", "func_expr", 
		"unary_expr", "number_expr", "number", "global_function", "group_function", 
		"basic_function", "function_arg", "grouped_roll_inner", "grouped_extras", 
		"basic_extras", "compare_expr", "explicit_compare_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'F'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_DOT_IDENTIFIER", "T_GLOBAL_IDENTIFIER", "T_NUMBER", "T_MACRO", 
		"T_EQUALS", "T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", 
		"T_NOT_EQUALS", "T_LPAREN", "T_RPAREN", "T_LBRACE", "T_RBRACE", "T_COMMA", 
		"T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", "T_D", "WS", "T_FUDGE", 
		"T_EXTRA_IDENTIFIER", "AN_WS", "AB_FUNCTION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiceGrammarParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DiceGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DiceGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DiceGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DiceGrammarParser.Eof, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			math_expr();
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_exprContext : ParserRuleContext {
		public Math_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_expr; } }
	 
		public Math_exprContext() { }
		public virtual void CopyFrom(Math_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathNormalContext : Math_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public MathNormalContext(Math_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMathNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMathNormal(this);
		}
	}

	[RuleVersion(0)]
	public Math_exprContext math_expr() {
		Math_exprContext _localctx = new Math_exprContext(Context, State);
		EnterRule(_localctx, 2, RULE_math_expr);
		try {
			_localctx = new MathNormalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			add_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
	 
		public Add_exprContext() { }
		public virtual void CopyFrom(Add_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddSubContext : Add_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddSubContext(Add_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
	}
	public partial class AddNoneContext : Add_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddNoneContext(Add_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddNone(this);
		}
	}
	public partial class AddAddContext : Add_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_PLUS() { return GetToken(DiceGrammarParser.T_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddAddContext(Add_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddAdd(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		return add_expr(0);
	}

	private Add_exprContext add_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_exprContext _localctx = new Add_exprContext(Context, _parentState);
		Add_exprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_add_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AddNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 42;
			mult_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 50;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new AddAddContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 44;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 45;
						Match(T_PLUS);
						State = 46;
						mult_expr(0);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 47;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 48;
						Match(T_MINUS);
						State = 49;
						mult_expr(0);
						}
						break;
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
	 
		public Mult_exprContext() { }
		public virtual void CopyFrom(Mult_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultMultContext : Mult_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MULTIPLY() { return GetToken(DiceGrammarParser.T_MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultMultContext(Mult_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultMult(this);
		}
	}
	public partial class MultNoneContext : Mult_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultNoneContext(Mult_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultNone(this);
		}
	}
	public partial class MultDivContext : Mult_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DIVIDE() { return GetToken(DiceGrammarParser.T_DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultDivContext(Mult_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultDiv(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		return mult_expr(0);
	}

	private Mult_exprContext mult_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mult_exprContext _localctx = new Mult_exprContext(Context, _parentState);
		Mult_exprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_mult_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new MultNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 56;
			roll_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 64;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MultMultContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 58;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 59;
						Match(T_MULTIPLY);
						State = 60;
						roll_expr();
						}
						break;
					case 2:
						{
						_localctx = new MultDivContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 61;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 62;
						Match(T_DIVIDE);
						State = 63;
						roll_expr();
						}
						break;
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Roll_exprContext : ParserRuleContext {
		public Roll_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roll_expr; } }
	 
		public Roll_exprContext() { }
		public virtual void CopyFrom(Roll_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RollNoneContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public RollNoneContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollNone(this);
		}
	}
	public partial class RollGroupContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LBRACE() { return GetToken(DiceGrammarParser.T_LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RBRACE() { return GetToken(DiceGrammarParser.T_RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_extrasContext[] grouped_extras() {
			return GetRuleContexts<Grouped_extrasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_extrasContext grouped_extras(int i) {
			return GetRuleContext<Grouped_extrasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_functionContext[] group_function() {
			return GetRuleContexts<Group_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_functionContext group_function(int i) {
			return GetRuleContext<Group_functionContext>(i);
		}
		public RollGroupContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollGroup(this);
		}
	}
	public partial class RollBasicContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public RollBasicContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollBasic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollBasic(this);
		}
	}
	public partial class RollFudgeContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FUDGE() { return GetToken(DiceGrammarParser.T_FUDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public RollFudgeContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollFudge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollFudge(this);
		}
	}

	[RuleVersion(0)]
	public Roll_exprContext roll_expr() {
		Roll_exprContext _localctx = new Roll_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_roll_expr);
		int _la;
		try {
			int _alt;
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new RollGroupContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 69;
					unary_expr();
					}
				}

				State = 72;
				Match(T_LBRACE);
				State = 73;
				grouped_roll_inner(0);
				State = 74;
				Match(T_RBRACE);
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 75;
						grouped_extras();
						}
						} 
					}
					State = 80;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 81;
						group_function();
						}
						} 
					}
					State = 86;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 2:
				_localctx = new RollBasicContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 87;
					unary_expr();
					}
				}

				State = 90;
				Match(T_D);
				State = 91;
				number_expr();
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 92;
						basic_extras();
						}
						} 
					}
					State = 97;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 98;
						basic_function();
						}
						} 
					}
					State = 103;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 3:
				_localctx = new RollFudgeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 104;
					unary_expr();
					}
				}

				State = 107;
				Match(T_D);
				State = 108;
				Match(T_FUDGE);
				State = 110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 109;
					unary_expr();
					}
					break;
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 112;
						basic_extras();
						}
						} 
					}
					State = 117;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 118;
						basic_function();
						}
						} 
					}
					State = 123;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				}
				break;
			case 4:
				_localctx = new RollNoneContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				func_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
	 
		public Func_exprContext() { }
		public virtual void CopyFrom(Func_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncFunctionContext : Func_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public FuncFunctionContext(Func_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncFunction(this);
		}
	}
	public partial class FuncNoneContext : Func_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public FuncNoneContext(Func_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncNone(this);
		}
	}
	public partial class FuncMinusContext : Func_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public FuncMinusContext(Func_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncMinus(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_func_expr);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new FuncMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				Match(T_MINUS);
				State = 128;
				global_function();
				}
				break;
			case 2:
				_localctx = new FuncFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				global_function();
				}
				break;
			case 3:
				_localctx = new FuncNoneContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				unary_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
	 
		public Unary_exprContext() { }
		public virtual void CopyFrom(Unary_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExprMinusContext : Unary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public UnaryExprMinusContext(Unary_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterUnaryExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitUnaryExprMinus(this);
		}
	}
	public partial class UnaryExprNoneContext : Unary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public UnaryExprNoneContext(Unary_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterUnaryExprNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitUnaryExprNone(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary_expr);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_MINUS:
				_localctx = new UnaryExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				Match(T_MINUS);
				State = 134;
				number_expr();
				}
				break;
			case T_NUMBER:
			case T_MACRO:
			case T_LPAREN:
				_localctx = new UnaryExprNoneContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				number_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_exprContext : ParserRuleContext {
		public Number_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_expr; } }
	 
		public Number_exprContext() { }
		public virtual void CopyFrom(Number_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberParenContext : Number_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public NumberParenContext(Number_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberParen(this);
		}
	}
	public partial class NumberNumberContext : Number_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberNumberContext(Number_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberNumber(this);
		}
	}

	[RuleVersion(0)]
	public Number_exprContext number_expr() {
		Number_exprContext _localctx = new Number_exprContext(Context, State);
		EnterRule(_localctx, 14, RULE_number_expr);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_LPAREN:
				_localctx = new NumberParenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				Match(T_LPAREN);
				State = 139;
				math_expr();
				State = 140;
				Match(T_RPAREN);
				}
				break;
			case T_NUMBER:
			case T_MACRO:
				_localctx = new NumberNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberMacroContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MACRO() { return GetToken(DiceGrammarParser.T_MACRO, 0); }
		public NumberMacroContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberMacro(this);
		}
	}
	public partial class NumberLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NUMBER() { return GetToken(DiceGrammarParser.T_NUMBER, 0); }
		public NumberLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_NUMBER:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				Match(T_NUMBER);
				}
				break;
			case T_MACRO:
				_localctx = new NumberMacroContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(T_MACRO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_functionContext : ParserRuleContext {
		public Global_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_function; } }
	 
		public Global_functionContext() { }
		public virtual void CopyFrom(Global_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GlobalFunctionContext : Global_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GLOBAL_IDENTIFIER() { return GetToken(DiceGrammarParser.T_GLOBAL_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GlobalFunctionContext(Global_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGlobalFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGlobalFunction(this);
		}
	}
	public partial class GlobalFunctionDPrefixContext : Global_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AB_FUNCTION() { return GetToken(DiceGrammarParser.AB_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GlobalFunctionDPrefixContext(Global_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGlobalFunctionDPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGlobalFunctionDPrefix(this);
		}
	}

	[RuleVersion(0)]
	public Global_functionContext global_function() {
		Global_functionContext _localctx = new Global_functionContext(Context, State);
		EnterRule(_localctx, 18, RULE_global_function);
		int _la;
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_GLOBAL_IDENTIFIER:
				_localctx = new GlobalFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				Match(T_GLOBAL_IDENTIFIER);
				State = 150;
				Match(T_LPAREN);
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
					{
					State = 151;
					function_arg();
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T_COMMA) {
						{
						{
						State = 152;
						Match(T_COMMA);
						State = 153;
						function_arg();
						}
						}
						State = 158;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 161;
				Match(T_RPAREN);
				}
				break;
			case T_D:
				_localctx = new GlobalFunctionDPrefixContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				Match(T_D);
				State = 163;
				Match(AB_FUNCTION);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
					{
					State = 164;
					function_arg();
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T_COMMA) {
						{
						{
						State = 165;
						Match(T_COMMA);
						State = 166;
						function_arg();
						}
						}
						State = 171;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 174;
				Match(T_RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_functionContext : ParserRuleContext {
		public Group_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_function; } }
	 
		public Group_functionContext() { }
		public virtual void CopyFrom(Group_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupFunctionContext : Group_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DOT_IDENTIFIER() { return GetToken(DiceGrammarParser.T_DOT_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GroupFunctionContext(Group_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupFunction(this);
		}
	}

	[RuleVersion(0)]
	public Group_functionContext group_function() {
		Group_functionContext _localctx = new Group_functionContext(Context, State);
		EnterRule(_localctx, 20, RULE_group_function);
		int _la;
		try {
			_localctx = new GroupFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T_DOT_IDENTIFIER);
			State = 178;
			Match(T_LPAREN);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
				{
				State = 179;
				function_arg();
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 180;
					Match(T_COMMA);
					State = 181;
					function_arg();
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 189;
			Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_functionContext : ParserRuleContext {
		public Basic_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_function; } }
	 
		public Basic_functionContext() { }
		public virtual void CopyFrom(Basic_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicFunctionContext : Basic_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DOT_IDENTIFIER() { return GetToken(DiceGrammarParser.T_DOT_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public BasicFunctionContext(Basic_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicFunction(this);
		}
	}

	[RuleVersion(0)]
	public Basic_functionContext basic_function() {
		Basic_functionContext _localctx = new Basic_functionContext(Context, State);
		EnterRule(_localctx, 22, RULE_basic_function);
		int _la;
		try {
			_localctx = new BasicFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T_DOT_IDENTIFIER);
			State = 192;
			Match(T_LPAREN);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
				{
				State = 193;
				function_arg();
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 194;
					Match(T_COMMA);
					State = 195;
					function_arg();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 203;
			Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argContext : ParserRuleContext {
		public Function_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arg; } }
	 
		public Function_argContext() { }
		public virtual void CopyFrom(Function_argContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnArgMathContext : Function_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public FnArgMathContext(Function_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFnArgMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFnArgMath(this);
		}
	}
	public partial class FnArgCompContext : Function_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public FnArgCompContext(Function_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFnArgComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFnArgComp(this);
		}
	}

	[RuleVersion(0)]
	public Function_argContext function_arg() {
		Function_argContext _localctx = new Function_argContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_arg);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_GLOBAL_IDENTIFIER:
			case T_NUMBER:
			case T_MACRO:
			case T_LPAREN:
			case T_LBRACE:
			case T_MINUS:
			case T_D:
				_localctx = new FnArgMathContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				math_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new FnArgCompContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_roll_innerContext : ParserRuleContext {
		public Grouped_roll_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_roll_inner; } }
	 
		public Grouped_roll_innerContext() { }
		public virtual void CopyFrom(Grouped_roll_innerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupInitContext : Grouped_roll_innerContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupInitContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupInit(this);
		}
	}
	public partial class GroupAdditionalContext : Grouped_roll_innerContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA() { return GetToken(DiceGrammarParser.T_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupAdditionalContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupAdditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupAdditional(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_roll_innerContext grouped_roll_inner() {
		return grouped_roll_inner(0);
	}

	private Grouped_roll_innerContext grouped_roll_inner(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Grouped_roll_innerContext _localctx = new Grouped_roll_innerContext(Context, _parentState);
		Grouped_roll_innerContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_grouped_roll_inner, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new GroupInitContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 210;
			math_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GroupAdditionalContext(new Grouped_roll_innerContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_grouped_roll_inner);
					State = 212;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 213;
					Match(T_COMMA);
					State = 214;
					math_expr();
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Grouped_extrasContext : ParserRuleContext {
		public Grouped_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_extras; } }
	 
		public Grouped_extrasContext() { }
		public virtual void CopyFrom(Grouped_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupExtraContext : Grouped_extrasContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EXTRA_IDENTIFIER() { return GetToken(DiceGrammarParser.T_EXTRA_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public GroupExtraContext(Grouped_extrasContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupExtra(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_extrasContext grouped_extras() {
		Grouped_extrasContext _localctx = new Grouped_extrasContext(Context, State);
		EnterRule(_localctx, 28, RULE_grouped_extras);
		try {
			_localctx = new GroupExtraContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T_EXTRA_IDENTIFIER);
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 221;
				compare_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_extrasContext : ParserRuleContext {
		public Basic_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_extras; } }
	 
		public Basic_extrasContext() { }
		public virtual void CopyFrom(Basic_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicExtraContext : Basic_extrasContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EXTRA_IDENTIFIER() { return GetToken(DiceGrammarParser.T_EXTRA_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public BasicExtraContext(Basic_extrasContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicExtra(this);
		}
	}

	[RuleVersion(0)]
	public Basic_extrasContext basic_extras() {
		Basic_extrasContext _localctx = new Basic_extrasContext(Context, State);
		EnterRule(_localctx, 30, RULE_basic_extras);
		try {
			_localctx = new BasicExtraContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(T_EXTRA_IDENTIFIER);
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 225;
				compare_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_exprContext : ParserRuleContext {
		public Compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_expr; } }
	 
		public Compare_exprContext() { }
		public virtual void CopyFrom(Compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompImplicitContext : Compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompImplicitContext(Compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompImplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompImplicit(this);
		}
	}
	public partial class CompExplicitContext : Compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public CompExplicitContext(Compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompExplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompExplicit(this);
		}
	}

	[RuleVersion(0)]
	public Compare_exprContext compare_expr() {
		Compare_exprContext _localctx = new Compare_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_compare_expr);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_NUMBER:
			case T_MACRO:
			case T_LPAREN:
			case T_MINUS:
				_localctx = new CompImplicitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				unary_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new CompExplicitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 229;
				explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_compare_exprContext : ParserRuleContext {
		public Explicit_compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_compare_expr; } }
	 
		public Explicit_compare_exprContext() { }
		public virtual void CopyFrom(Explicit_compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EQUALS() { return GetToken(DiceGrammarParser.T_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompEquals(this);
		}
	}
	public partial class CompGreaterContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GREATER() { return GetToken(DiceGrammarParser.T_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompGreaterContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompGreater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompGreater(this);
		}
	}
	public partial class CompLessContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LESS() { return GetToken(DiceGrammarParser.T_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompLessContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompLess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompLess(this);
		}
	}
	public partial class CompGreaterEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GREATER_EQUALS() { return GetToken(DiceGrammarParser.T_GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompGreaterEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompGreaterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompGreaterEquals(this);
		}
	}
	public partial class CompLessEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LESS_EQUALS() { return GetToken(DiceGrammarParser.T_LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompLessEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompLessEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompLessEquals(this);
		}
	}
	public partial class CompNotEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NOT_EQUALS() { return GetToken(DiceGrammarParser.T_NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompNotEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompNotEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompNotEquals(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_compare_exprContext explicit_compare_expr() {
		Explicit_compare_exprContext _localctx = new Explicit_compare_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_explicit_compare_expr);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EQUALS:
				_localctx = new CompEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				Match(T_EQUALS);
				State = 233;
				unary_expr();
				}
				break;
			case T_GREATER:
				_localctx = new CompGreaterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(T_GREATER);
				State = 235;
				unary_expr();
				}
				break;
			case T_LESS:
				_localctx = new CompLessContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 236;
				Match(T_LESS);
				State = 237;
				unary_expr();
				}
				break;
			case T_GREATER_EQUALS:
				_localctx = new CompGreaterEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				Match(T_GREATER_EQUALS);
				State = 239;
				unary_expr();
				}
				break;
			case T_LESS_EQUALS:
				_localctx = new CompLessEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 240;
				Match(T_LESS_EQUALS);
				State = 241;
				unary_expr();
				}
				break;
			case T_NOT_EQUALS:
				_localctx = new CompNotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 242;
				Match(T_NOT_EQUALS);
				State = 243;
				unary_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return add_expr_sempred((Add_exprContext)_localctx, predIndex);
		case 3: return mult_expr_sempred((Mult_exprContext)_localctx, predIndex);
		case 13: return grouped_roll_inner_sempred((Grouped_roll_innerContext)_localctx, predIndex);
		}
		return true;
	}
	private bool add_expr_sempred(Add_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool mult_expr_sempred(Mult_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool grouped_roll_inner_sempred(Grouped_roll_innerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '\xF9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x35', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x43', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x46', '\v', '\x5', '\x3', '\x6', 
		'\x5', '\x6', 'I', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'R', '\v', '\x6', '\x3', '\x6', '\a', '\x6', 'U', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'X', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', '[', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '`', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x63', '\v', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\x66', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'i', '\v', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'l', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'q', '\n', '\x6', '\x3', '\x6', '\a', '\x6', 
		't', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'w', '\v', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'z', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '}', 
		'\v', '\x6', '\x3', '\x6', '\x5', '\x6', '\x80', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x86', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8B', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x92', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x96', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x9D', '\n', '\v', '\f', '\v', '\xE', '\v', '\xA0', 
		'\v', '\v', '\x5', '\v', '\xA2', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xAA', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xAD', '\v', '\v', '\x5', '\v', 
		'\xAF', '\n', '\v', '\x3', '\v', '\x5', '\v', '\xB2', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\xB9', '\n', '\f', '\f', '\f', '\xE', '\f', '\xBC', '\v', '\f', '\x5', 
		'\f', '\xBE', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xC7', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\xCA', '\v', '\r', '\x5', '\r', '\xCC', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xD2', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xDA', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xDD', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xE1', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xE5', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\xE9', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\xF7', '\n', '\x13', '\x3', '\x13', '\x2', '\x5', '\x6', '\b', '\x1C', 
		'\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', 
		'\x2', '\x2', '\x10F', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', '+', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x39', '\x3', '\x2', '\x2', '\x2', '\n', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x85', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x95', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xE2', '\x3', '\x2', '\x2', '\x2', '\"', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xF6', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x5', '\x4', '\x3', '\x2', '\'', '(', '\a', '\x2', '\x2', '\x3', '(', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x5', '\x6', '\x4', '\x2', 
		'*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', ',', '\b', '\x4', '\x1', 
		'\x2', ',', '-', '\x5', '\b', '\x5', '\x2', '-', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\f', '\x5', '\x2', '\x2', '/', '\x30', '\a', 
		'\x12', '\x2', '\x2', '\x30', '\x35', '\x5', '\b', '\x5', '\x2', '\x31', 
		'\x32', '\f', '\x4', '\x2', '\x2', '\x32', '\x33', '\a', '\x13', '\x2', 
		'\x2', '\x33', '\x35', '\x5', '\b', '\x5', '\x2', '\x34', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x31', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\b', '\x5', '\x1', '\x2', ':', ';', '\x5', '\n', '\x6', '\x2', ';', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '<', '=', '\f', '\x5', '\x2', '\x2', 
		'=', '>', '\a', '\x14', '\x2', '\x2', '>', '\x43', '\x5', '\n', '\x6', 
		'\x2', '?', '@', '\f', '\x4', '\x2', '\x2', '@', '\x41', '\a', '\x15', 
		'\x2', '\x2', '\x41', '\x43', '\x5', '\n', '\x6', '\x2', '\x42', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\x5', '\xE', '\b', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\a', '\xF', '\x2', '\x2', 'K', 'L', '\x5', '\x1C', '\xF', '\x2', 
		'L', 'P', '\a', '\x10', '\x2', '\x2', 'M', 'O', '\x5', '\x1E', '\x10', 
		'\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'V', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\x5', '\x16', '\f', '\x2', 'T', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\x80', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x5', '\xE', 
		'\b', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', 
		'\x16', '\x2', '\x2', ']', '\x61', '\x5', '\x10', '\t', '\x2', '^', '`', 
		'\x5', ' ', '\x11', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\x5', '\x18', '\r', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x80', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x5', 
		'\xE', '\b', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', 
		'\x16', '\x2', '\x2', 'n', 'p', '\a', '\x18', '\x2', '\x2', 'o', 'q', 
		'\x5', '\xE', '\b', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'p', 
		'q', '\x3', '\x2', '\x2', '\x2', 'q', 'u', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x5', ' ', '\x11', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', '{', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x5', '\x18', '\r', '\x2', 
		'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', 
		'{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x80', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x80', '\x5', '\f', '\a', '\x2', '\x7F', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', 'Z', '\x3', '\x2', '\x2', '\x2', '\x7F', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\x13', '\x2', 
		'\x2', '\x82', '\x86', '\x5', '\x14', '\v', '\x2', '\x83', '\x86', '\x5', 
		'\x14', '\v', '\x2', '\x84', '\x86', '\x5', '\xE', '\b', '\x2', '\x85', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x13', '\x2', '\x2', '\x88', 
		'\x8B', '\x5', '\x10', '\t', '\x2', '\x89', '\x8B', '\x5', '\x10', '\t', 
		'\x2', '\x8A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\xF', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '\r', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x4', '\x3', 
		'\x2', '\x8E', '\x8F', '\a', '\xE', '\x2', '\x2', '\x8F', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x5', '\x12', '\n', '\x2', '\x91', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x11', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\a', 
		'\x5', '\x2', '\x2', '\x94', '\x96', '\a', '\x6', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x13', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', 
		'\x4', '\x2', '\x2', '\x98', '\xA1', '\a', '\r', '\x2', '\x2', '\x99', 
		'\x9E', '\x5', '\x1A', '\xE', '\x2', '\x9A', '\x9B', '\a', '\x11', '\x2', 
		'\x2', '\x9B', '\x9D', '\x5', '\x1A', '\xE', '\x2', '\x9C', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xB2', '\a', '\xE', '\x2', '\x2', '\xA4', '\xA5', '\a', 
		'\x16', '\x2', '\x2', '\xA5', '\xAE', '\a', '\x1B', '\x2', '\x2', '\xA6', 
		'\xAB', '\x5', '\x1A', '\xE', '\x2', '\xA7', '\xA8', '\a', '\x11', '\x2', 
		'\x2', '\xA8', '\xAA', '\x5', '\x1A', '\xE', '\x2', '\xA9', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB2', '\a', '\xE', '\x2', '\x2', '\xB1', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x3', '\x2', 
		'\x2', '\xB4', '\xBD', '\a', '\r', '\x2', '\x2', '\xB5', '\xBA', '\x5', 
		'\x1A', '\xE', '\x2', '\xB6', '\xB7', '\a', '\x11', '\x2', '\x2', '\xB7', 
		'\xB9', '\x5', '\x1A', '\xE', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\xE', '\x2', '\x2', '\xC0', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\x3', '\x2', '\x2', '\xC2', '\xCB', '\a', 
		'\r', '\x2', '\x2', '\xC3', '\xC8', '\x5', '\x1A', '\xE', '\x2', '\xC4', 
		'\xC5', '\a', '\x11', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x1A', '\xE', 
		'\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\xE', '\x2', 
		'\x2', '\xCE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x5', 
		'\x4', '\x3', '\x2', '\xD0', '\xD2', '\x5', '$', '\x13', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\b', 
		'\xF', '\x1', '\x2', '\xD4', '\xD5', '\x5', '\x4', '\x3', '\x2', '\xD5', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\f', '\x4', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\x11', '\x2', '\x2', '\xD8', '\xDA', '\x5', 
		'\x4', '\x3', '\x2', '\xD9', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xE0', '\a', '\x19', '\x2', '\x2', '\xDF', '\xE1', '\x5', '\"', '\x12', 
		'\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE4', '\a', '\x19', '\x2', '\x2', '\xE3', '\xE5', '\x5', '\"', '\x12', 
		'\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '!', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE9', '\x5', '\xE', '\b', '\x2', '\xE7', '\xE9', '\x5', '$', '\x13', 
		'\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '#', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\a', '\a', '\x2', '\x2', '\xEB', '\xF7', '\x5', '\xE', '\b', 
		'\x2', '\xEC', '\xED', '\a', '\b', '\x2', '\x2', '\xED', '\xF7', '\x5', 
		'\xE', '\b', '\x2', '\xEE', '\xEF', '\a', '\t', '\x2', '\x2', '\xEF', 
		'\xF7', '\x5', '\xE', '\b', '\x2', '\xF0', '\xF1', '\a', '\n', '\x2', 
		'\x2', '\xF1', '\xF7', '\x5', '\xE', '\b', '\x2', '\xF2', '\xF3', '\a', 
		'\v', '\x2', '\x2', '\xF3', '\xF7', '\x5', '\xE', '\b', '\x2', '\xF4', 
		'\xF5', '\a', '\f', '\x2', '\x2', '\xF5', '\xF7', '\x5', '\xE', '\b', 
		'\x2', '\xF6', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '%', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x34', '\x36', '\x42', '\x44', 'H', 'P', 'V', 
		'Z', '\x61', 'g', 'k', 'p', 'u', '{', '\x7F', '\x85', '\x8A', '\x91', 
		'\x95', '\x9E', '\xA1', '\xAB', '\xAE', '\xB1', '\xBA', '\xBD', '\xC8', 
		'\xCB', '\xD1', '\xDB', '\xE0', '\xE4', '\xE8', '\xF6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dice.Grammar
