//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammarParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DiceGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_IDENTIFIER=1, T_GLOBAL_IDENTIFIER=2, T_NUMBER=3, T_MACRO=4, T_EQUALS=5, 
		T_GREATER=6, T_LESS=7, T_GREATER_EQUALS=8, T_LESS_EQUALS=9, T_NOT_EQUALS=10, 
		T_LPAREN=11, T_RPAREN=12, T_LBRACE=13, T_RBRACE=14, T_COMMA=15, T_DOT=16, 
		T_PLUS=17, T_MINUS=18, T_MULTIPLY=19, T_DIVIDE=20, WS=21, T_FUDGE=22, 
		T_D=23, T_KEEP_HIGH=24, T_KEEP_LOW=25, T_DROP_HIGH=26, T_DROP_LOW=27, 
		T_ADVANTAGE=28, T_DISADVANTAGE=29, T_REROLL=30, T_REROLL_ONCE=31, T_EXPLODE=32, 
		T_COMPOUND=33, T_PENETRATE=34, T_CRIT=35, T_CRITFAIL=36, T_FAIL=37, T_SORT_ASC=38, 
		T_SORT_DESC=39, AN_WS=40;
	public const int
		RULE_input = 0, RULE_math_expr = 1, RULE_add_expr = 2, RULE_mult_expr = 3, 
		RULE_roll_expr = 4, RULE_func_expr = 5, RULE_unary_expr = 6, RULE_number_expr = 7, 
		RULE_number = 8, RULE_global_function = 9, RULE_group_function = 10, RULE_basic_function = 11, 
		RULE_function_arg = 12, RULE_grouped_roll_inner = 13, RULE_grouped_extras = 14, 
		RULE_basic_extras = 15, RULE_keep_expr = 16, RULE_reroll_expr = 17, RULE_explode_expr = 18, 
		RULE_success_expr = 19, RULE_compare_expr = 20, RULE_explicit_compare_expr = 21, 
		RULE_sort_expr = 22, RULE_crit_expr = 23;
	public static readonly string[] ruleNames = {
		"input", "math_expr", "add_expr", "mult_expr", "roll_expr", "func_expr", 
		"unary_expr", "number_expr", "number", "global_function", "group_function", 
		"basic_function", "function_arg", "grouped_roll_inner", "grouped_extras", 
		"basic_extras", "keep_expr", "reroll_expr", "explode_expr", "success_expr", 
		"compare_expr", "explicit_compare_expr", "sort_expr", "crit_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'F'", "'d'", 
		"'kh'", "'kl'", "'dh'", "'dl'", "'ad'", "'da'", "'rr'", "'ro'", "'!e'", 
		"'!c'", "'!p'", "'cs'", "'cf'", "'f'", "'sa'", "'sd'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_IDENTIFIER", "T_GLOBAL_IDENTIFIER", "T_NUMBER", "T_MACRO", "T_EQUALS", 
		"T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", "T_NOT_EQUALS", 
		"T_LPAREN", "T_RPAREN", "T_LBRACE", "T_RBRACE", "T_COMMA", "T_DOT", "T_PLUS", 
		"T_MINUS", "T_MULTIPLY", "T_DIVIDE", "WS", "T_FUDGE", "T_D", "T_KEEP_HIGH", 
		"T_KEEP_LOW", "T_DROP_HIGH", "T_DROP_LOW", "T_ADVANTAGE", "T_DISADVANTAGE", 
		"T_REROLL", "T_REROLL_ONCE", "T_EXPLODE", "T_COMPOUND", "T_PENETRATE", 
		"T_CRIT", "T_CRITFAIL", "T_FAIL", "T_SORT_ASC", "T_SORT_DESC", "AN_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiceGrammarParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DiceGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DiceGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DiceGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(DiceGrammarParser.Eof, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; math_expr();
			State = 49; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_exprContext : ParserRuleContext {
		public Math_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_expr; } }
	 
		public Math_exprContext() { }
		public virtual void CopyFrom(Math_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathNormalContext : Math_exprContext {
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public MathNormalContext(Math_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMathNormal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMathNormal(this);
		}
	}

	[RuleVersion(0)]
	public Math_exprContext math_expr() {
		Math_exprContext _localctx = new Math_exprContext(Context, State);
		EnterRule(_localctx, 2, RULE_math_expr);
		try {
			_localctx = new MathNormalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; add_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
	 
		public Add_exprContext() { }
		public virtual void CopyFrom(Add_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddSubContext : Add_exprContext {
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddSubContext(Add_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
	}
	public partial class AddNoneContext : Add_exprContext {
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddNoneContext(Add_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddNone(this);
		}
	}
	public partial class AddAddContext : Add_exprContext {
		public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public ITerminalNode T_PLUS() { return GetToken(DiceGrammarParser.T_PLUS, 0); }
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddAddContext(Add_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddAdd(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		return add_expr(0);
	}

	private Add_exprContext add_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_exprContext _localctx = new Add_exprContext(Context, _parentState);
		Add_exprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_add_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AddNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 54; mult_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new AddAddContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 56;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 57; Match(T_PLUS);
						State = 58; mult_expr(0);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 59;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 60; Match(T_MINUS);
						State = 61; mult_expr(0);
						}
						break;
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
	 
		public Mult_exprContext() { }
		public virtual void CopyFrom(Mult_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultMultContext : Mult_exprContext {
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public ITerminalNode T_MULTIPLY() { return GetToken(DiceGrammarParser.T_MULTIPLY, 0); }
		public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultMultContext(Mult_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultMult(this);
		}
	}
	public partial class MultNoneContext : Mult_exprContext {
		public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultNoneContext(Mult_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultNone(this);
		}
	}
	public partial class MultDivContext : Mult_exprContext {
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public ITerminalNode T_DIVIDE() { return GetToken(DiceGrammarParser.T_DIVIDE, 0); }
		public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultDivContext(Mult_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultDiv(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		return mult_expr(0);
	}

	private Mult_exprContext mult_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mult_exprContext _localctx = new Mult_exprContext(Context, _parentState);
		Mult_exprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_mult_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new MultNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 68; roll_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 76;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MultMultContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 70;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 71; Match(T_MULTIPLY);
						State = 72; roll_expr();
						}
						break;
					case 2:
						{
						_localctx = new MultDivContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 73;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 74; Match(T_DIVIDE);
						State = 75; roll_expr();
						}
						break;
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Roll_exprContext : ParserRuleContext {
		public Roll_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roll_expr; } }
	 
		public Roll_exprContext() { }
		public virtual void CopyFrom(Roll_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RollNoneContext : Roll_exprContext {
		public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public RollNoneContext(Roll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollNone(this);
		}
	}
	public partial class RollGroupContext : Roll_exprContext {
		public ITerminalNode T_LBRACE() { return GetToken(DiceGrammarParser.T_LBRACE, 0); }
		public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		public ITerminalNode T_RBRACE() { return GetToken(DiceGrammarParser.T_RBRACE, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public Grouped_extrasContext[] grouped_extras() {
			return GetRuleContexts<Grouped_extrasContext>();
		}
		public Grouped_extrasContext grouped_extras(int i) {
			return GetRuleContext<Grouped_extrasContext>(i);
		}
		public Group_functionContext[] group_function() {
			return GetRuleContexts<Group_functionContext>();
		}
		public Group_functionContext group_function(int i) {
			return GetRuleContext<Group_functionContext>(i);
		}
		public RollGroupContext(Roll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollGroup(this);
		}
	}
	public partial class RollBasicContext : Roll_exprContext {
		public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public RollBasicContext(Roll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollBasic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollBasic(this);
		}
	}
	public partial class RollFudgeContext : Roll_exprContext {
		public ITerminalNode T_D() { return GetToken(DiceGrammarParser.T_D, 0); }
		public ITerminalNode T_FUDGE() { return GetToken(DiceGrammarParser.T_FUDGE, 0); }
		public Unary_exprContext[] unary_expr() {
			return GetRuleContexts<Unary_exprContext>();
		}
		public Unary_exprContext unary_expr(int i) {
			return GetRuleContext<Unary_exprContext>(i);
		}
		public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public RollFudgeContext(Roll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollFudge(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollFudge(this);
		}
	}

	[RuleVersion(0)]
	public Roll_exprContext roll_expr() {
		Roll_exprContext _localctx = new Roll_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_roll_expr);
		int _la;
		try {
			int _alt;
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new RollGroupContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 81; unary_expr();
					}
				}

				State = 84; Match(T_LBRACE);
				State = 85; grouped_roll_inner(0);
				State = 86; Match(T_RBRACE);
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 87; grouped_extras();
						}
						} 
					}
					State = 92;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 93; group_function();
						}
						} 
					}
					State = 98;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 2:
				_localctx = new RollBasicContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 99; unary_expr();
					}
				}

				State = 102; Match(T_D);
				State = 103; number_expr();
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 104; basic_extras();
						}
						} 
					}
					State = 109;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 110; basic_function();
						}
						} 
					}
					State = 115;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 3:
				_localctx = new RollFudgeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_LPAREN) | (1L << T_MINUS))) != 0)) {
					{
					State = 116; unary_expr();
					}
				}

				State = 119; Match(T_D);
				State = 120; Match(T_FUDGE);
				State = 122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 121; unary_expr();
					}
					break;
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 124; basic_extras();
						}
						} 
					}
					State = 129;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 130; basic_function();
						}
						} 
					}
					State = 135;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				}
				break;
			case 4:
				_localctx = new RollNoneContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 136; func_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
	 
		public Func_exprContext() { }
		public virtual void CopyFrom(Func_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncFunctionContext : Func_exprContext {
		public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public FuncFunctionContext(Func_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncFunction(this);
		}
	}
	public partial class FuncNoneContext : Func_exprContext {
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public FuncNoneContext(Func_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncNone(this);
		}
	}
	public partial class FuncMinusContext : Func_exprContext {
		public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public FuncMinusContext(Func_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncMinus(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_func_expr);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new FuncMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; Match(T_MINUS);
				State = 140; global_function();
				}
				break;
			case 2:
				_localctx = new FuncFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; global_function();
				}
				break;
			case 3:
				_localctx = new FuncNoneContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 142; unary_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
	 
		public Unary_exprContext() { }
		public virtual void CopyFrom(Unary_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExprMinusContext : Unary_exprContext {
		public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public UnaryExprMinusContext(Unary_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterUnaryExprMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitUnaryExprMinus(this);
		}
	}
	public partial class UnaryExprNoneContext : Unary_exprContext {
		public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public UnaryExprNoneContext(Unary_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterUnaryExprNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitUnaryExprNone(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary_expr);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_MINUS:
				_localctx = new UnaryExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(T_MINUS);
				State = 146; number_expr();
				}
				break;
			case T_NUMBER:
			case T_MACRO:
			case T_LPAREN:
				_localctx = new UnaryExprNoneContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; number_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_exprContext : ParserRuleContext {
		public Number_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_expr; } }
	 
		public Number_exprContext() { }
		public virtual void CopyFrom(Number_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberParenContext : Number_exprContext {
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public NumberParenContext(Number_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberParen(this);
		}
	}
	public partial class NumberNumberContext : Number_exprContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberNumberContext(Number_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberNumber(this);
		}
	}

	[RuleVersion(0)]
	public Number_exprContext number_expr() {
		Number_exprContext _localctx = new Number_exprContext(Context, State);
		EnterRule(_localctx, 14, RULE_number_expr);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_LPAREN:
				_localctx = new NumberParenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; Match(T_LPAREN);
				State = 151; math_expr();
				State = 152; Match(T_RPAREN);
				}
				break;
			case T_NUMBER:
			case T_MACRO:
				_localctx = new NumberNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberMacroContext : NumberContext {
		public ITerminalNode T_MACRO() { return GetToken(DiceGrammarParser.T_MACRO, 0); }
		public NumberMacroContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberMacro(this);
		}
	}
	public partial class NumberLiteralContext : NumberContext {
		public ITerminalNode T_NUMBER() { return GetToken(DiceGrammarParser.T_NUMBER, 0); }
		public NumberLiteralContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_NUMBER:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; Match(T_NUMBER);
				}
				break;
			case T_MACRO:
				_localctx = new NumberMacroContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(T_MACRO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_functionContext : ParserRuleContext {
		public Global_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_function; } }
	 
		public Global_functionContext() { }
		public virtual void CopyFrom(Global_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GlobalFunctionContext : Global_functionContext {
		public ITerminalNode T_GLOBAL_IDENTIFIER() { return GetToken(DiceGrammarParser.T_GLOBAL_IDENTIFIER, 0); }
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GlobalFunctionContext(Global_functionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGlobalFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGlobalFunction(this);
		}
	}

	[RuleVersion(0)]
	public Global_functionContext global_function() {
		Global_functionContext _localctx = new Global_functionContext(Context, State);
		EnterRule(_localctx, 18, RULE_global_function);
		int _la;
		try {
			_localctx = new GlobalFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(T_GLOBAL_IDENTIFIER);
			State = 162; Match(T_LPAREN);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
				{
				State = 163; function_arg();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 164; Match(T_COMMA);
					State = 165; function_arg();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 173; Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_functionContext : ParserRuleContext {
		public Group_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_function; } }
	 
		public Group_functionContext() { }
		public virtual void CopyFrom(Group_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupFunctionContext : Group_functionContext {
		public ITerminalNode T_DOT() { return GetToken(DiceGrammarParser.T_DOT, 0); }
		public ITerminalNode T_IDENTIFIER() { return GetToken(DiceGrammarParser.T_IDENTIFIER, 0); }
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GroupFunctionContext(Group_functionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupFunction(this);
		}
	}

	[RuleVersion(0)]
	public Group_functionContext group_function() {
		Group_functionContext _localctx = new Group_functionContext(Context, State);
		EnterRule(_localctx, 20, RULE_group_function);
		int _la;
		try {
			_localctx = new GroupFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(T_DOT);
			State = 176; Match(T_IDENTIFIER);
			State = 177; Match(T_LPAREN);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
				{
				State = 178; function_arg();
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 179; Match(T_COMMA);
					State = 180; function_arg();
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 188; Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_functionContext : ParserRuleContext {
		public Basic_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_function; } }
	 
		public Basic_functionContext() { }
		public virtual void CopyFrom(Basic_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicFunctionContext : Basic_functionContext {
		public ITerminalNode T_DOT() { return GetToken(DiceGrammarParser.T_DOT, 0); }
		public ITerminalNode T_IDENTIFIER() { return GetToken(DiceGrammarParser.T_IDENTIFIER, 0); }
		public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public BasicFunctionContext(Basic_functionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicFunction(this);
		}
	}

	[RuleVersion(0)]
	public Basic_functionContext basic_function() {
		Basic_functionContext _localctx = new Basic_functionContext(Context, State);
		EnterRule(_localctx, 22, RULE_basic_function);
		int _la;
		try {
			_localctx = new BasicFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(T_DOT);
			State = 191; Match(T_IDENTIFIER);
			State = 192; Match(T_LPAREN);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_GLOBAL_IDENTIFIER) | (1L << T_NUMBER) | (1L << T_MACRO) | (1L << T_EQUALS) | (1L << T_GREATER) | (1L << T_LESS) | (1L << T_GREATER_EQUALS) | (1L << T_LESS_EQUALS) | (1L << T_NOT_EQUALS) | (1L << T_LPAREN) | (1L << T_LBRACE) | (1L << T_MINUS) | (1L << T_D))) != 0)) {
				{
				State = 193; function_arg();
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 194; Match(T_COMMA);
					State = 195; function_arg();
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 203; Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argContext : ParserRuleContext {
		public Function_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arg; } }
	 
		public Function_argContext() { }
		public virtual void CopyFrom(Function_argContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnArgMathContext : Function_argContext {
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public FnArgMathContext(Function_argContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFnArgMath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFnArgMath(this);
		}
	}
	public partial class FnArgCompContext : Function_argContext {
		public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public FnArgCompContext(Function_argContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFnArgComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFnArgComp(this);
		}
	}

	[RuleVersion(0)]
	public Function_argContext function_arg() {
		Function_argContext _localctx = new Function_argContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_arg);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_GLOBAL_IDENTIFIER:
			case T_NUMBER:
			case T_MACRO:
			case T_LPAREN:
			case T_LBRACE:
			case T_MINUS:
			case T_D:
				_localctx = new FnArgMathContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; math_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new FnArgCompContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_roll_innerContext : ParserRuleContext {
		public Grouped_roll_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_roll_inner; } }
	 
		public Grouped_roll_innerContext() { }
		public virtual void CopyFrom(Grouped_roll_innerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupInitContext : Grouped_roll_innerContext {
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupInitContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupInit(this);
		}
	}
	public partial class GroupExtraContext : Grouped_roll_innerContext {
		public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		public ITerminalNode T_COMMA() { return GetToken(DiceGrammarParser.T_COMMA, 0); }
		public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupExtraContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupExtra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupExtra(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_roll_innerContext grouped_roll_inner() {
		return grouped_roll_inner(0);
	}

	private Grouped_roll_innerContext grouped_roll_inner(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Grouped_roll_innerContext _localctx = new Grouped_roll_innerContext(Context, _parentState);
		Grouped_roll_innerContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_grouped_roll_inner, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new GroupInitContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 210; math_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GroupExtraContext(new Grouped_roll_innerContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_grouped_roll_inner);
					State = 212;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 213; Match(T_COMMA);
					State = 214; math_expr();
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Grouped_extrasContext : ParserRuleContext {
		public Grouped_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_extras; } }
	 
		public Grouped_extrasContext() { }
		public virtual void CopyFrom(Grouped_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupSortContext : Grouped_extrasContext {
		public Sort_exprContext sort_expr() {
			return GetRuleContext<Sort_exprContext>(0);
		}
		public GroupSortContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupSort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupSort(this);
		}
	}
	public partial class GroupSuccessContext : Grouped_extrasContext {
		public Success_exprContext success_expr() {
			return GetRuleContext<Success_exprContext>(0);
		}
		public GroupSuccessContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupSuccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupSuccess(this);
		}
	}
	public partial class GroupRerollContext : Grouped_extrasContext {
		public Reroll_exprContext reroll_expr() {
			return GetRuleContext<Reroll_exprContext>(0);
		}
		public GroupRerollContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupReroll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupReroll(this);
		}
	}
	public partial class GroupKeepContext : Grouped_extrasContext {
		public Keep_exprContext keep_expr() {
			return GetRuleContext<Keep_exprContext>(0);
		}
		public GroupKeepContext(Grouped_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupKeep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupKeep(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_extrasContext grouped_extras() {
		Grouped_extrasContext _localctx = new Grouped_extrasContext(Context, State);
		EnterRule(_localctx, 28, RULE_grouped_extras);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_KEEP_HIGH:
			case T_KEEP_LOW:
			case T_DROP_HIGH:
			case T_DROP_LOW:
			case T_ADVANTAGE:
			case T_DISADVANTAGE:
				_localctx = new GroupKeepContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; keep_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new GroupSuccessContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; success_expr();
				}
				break;
			case T_SORT_ASC:
			case T_SORT_DESC:
				_localctx = new GroupSortContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 222; sort_expr();
				}
				break;
			case T_REROLL:
			case T_REROLL_ONCE:
				_localctx = new GroupRerollContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; reroll_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_extrasContext : ParserRuleContext {
		public Basic_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_extras; } }
	 
		public Basic_extrasContext() { }
		public virtual void CopyFrom(Basic_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicRerollContext : Basic_extrasContext {
		public Reroll_exprContext reroll_expr() {
			return GetRuleContext<Reroll_exprContext>(0);
		}
		public BasicRerollContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicReroll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicReroll(this);
		}
	}
	public partial class BasicSuccessContext : Basic_extrasContext {
		public Success_exprContext success_expr() {
			return GetRuleContext<Success_exprContext>(0);
		}
		public BasicSuccessContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicSuccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicSuccess(this);
		}
	}
	public partial class BasicKeepContext : Basic_extrasContext {
		public Keep_exprContext keep_expr() {
			return GetRuleContext<Keep_exprContext>(0);
		}
		public BasicKeepContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicKeep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicKeep(this);
		}
	}
	public partial class BasicSortContext : Basic_extrasContext {
		public Sort_exprContext sort_expr() {
			return GetRuleContext<Sort_exprContext>(0);
		}
		public BasicSortContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicSort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicSort(this);
		}
	}
	public partial class BasicExplodeContext : Basic_extrasContext {
		public Explode_exprContext explode_expr() {
			return GetRuleContext<Explode_exprContext>(0);
		}
		public BasicExplodeContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicExplode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicExplode(this);
		}
	}
	public partial class BasicCritContext : Basic_extrasContext {
		public Crit_exprContext crit_expr() {
			return GetRuleContext<Crit_exprContext>(0);
		}
		public BasicCritContext(Basic_extrasContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicCrit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicCrit(this);
		}
	}

	[RuleVersion(0)]
	public Basic_extrasContext basic_extras() {
		Basic_extrasContext _localctx = new Basic_extrasContext(Context, State);
		EnterRule(_localctx, 30, RULE_basic_extras);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_REROLL:
			case T_REROLL_ONCE:
				_localctx = new BasicRerollContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; reroll_expr();
				}
				break;
			case T_EXPLODE:
			case T_COMPOUND:
			case T_PENETRATE:
				_localctx = new BasicExplodeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; explode_expr();
				}
				break;
			case T_KEEP_HIGH:
			case T_KEEP_LOW:
			case T_DROP_HIGH:
			case T_DROP_LOW:
			case T_ADVANTAGE:
			case T_DISADVANTAGE:
				_localctx = new BasicKeepContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 228; keep_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new BasicSuccessContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 229; success_expr();
				}
				break;
			case T_SORT_ASC:
			case T_SORT_DESC:
				_localctx = new BasicSortContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 230; sort_expr();
				}
				break;
			case T_CRIT:
			case T_CRITFAIL:
				_localctx = new BasicCritContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 231; crit_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keep_exprContext : ParserRuleContext {
		public Keep_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keep_expr; } }
	 
		public Keep_exprContext() { }
		public virtual void CopyFrom(Keep_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeepHighContext : Keep_exprContext {
		public ITerminalNode T_KEEP_HIGH() { return GetToken(DiceGrammarParser.T_KEEP_HIGH, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public KeepHighContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterKeepHigh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitKeepHigh(this);
		}
	}
	public partial class AdvantageContext : Keep_exprContext {
		public ITerminalNode T_ADVANTAGE() { return GetToken(DiceGrammarParser.T_ADVANTAGE, 0); }
		public AdvantageContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAdvantage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAdvantage(this);
		}
	}
	public partial class DropLowContext : Keep_exprContext {
		public ITerminalNode T_DROP_LOW() { return GetToken(DiceGrammarParser.T_DROP_LOW, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public DropLowContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterDropLow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitDropLow(this);
		}
	}
	public partial class DisadvantageContext : Keep_exprContext {
		public ITerminalNode T_DISADVANTAGE() { return GetToken(DiceGrammarParser.T_DISADVANTAGE, 0); }
		public DisadvantageContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterDisadvantage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitDisadvantage(this);
		}
	}
	public partial class DropHighContext : Keep_exprContext {
		public ITerminalNode T_DROP_HIGH() { return GetToken(DiceGrammarParser.T_DROP_HIGH, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public DropHighContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterDropHigh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitDropHigh(this);
		}
	}
	public partial class KeepLowContext : Keep_exprContext {
		public ITerminalNode T_KEEP_LOW() { return GetToken(DiceGrammarParser.T_KEEP_LOW, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public KeepLowContext(Keep_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterKeepLow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitKeepLow(this);
		}
	}

	[RuleVersion(0)]
	public Keep_exprContext keep_expr() {
		Keep_exprContext _localctx = new Keep_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_keep_expr);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_KEEP_HIGH:
				_localctx = new KeepHighContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(T_KEEP_HIGH);
				State = 235; unary_expr();
				}
				break;
			case T_KEEP_LOW:
				_localctx = new KeepLowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; Match(T_KEEP_LOW);
				State = 237; unary_expr();
				}
				break;
			case T_DROP_HIGH:
				_localctx = new DropHighContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 238; Match(T_DROP_HIGH);
				State = 239; unary_expr();
				}
				break;
			case T_DROP_LOW:
				_localctx = new DropLowContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 240; Match(T_DROP_LOW);
				State = 241; unary_expr();
				}
				break;
			case T_ADVANTAGE:
				_localctx = new AdvantageContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 242; Match(T_ADVANTAGE);
				}
				break;
			case T_DISADVANTAGE:
				_localctx = new DisadvantageContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 243; Match(T_DISADVANTAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reroll_exprContext : ParserRuleContext {
		public Reroll_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reroll_expr; } }
	 
		public Reroll_exprContext() { }
		public virtual void CopyFrom(Reroll_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RerollOnceContext : Reroll_exprContext {
		public ITerminalNode T_REROLL_ONCE() { return GetToken(DiceGrammarParser.T_REROLL_ONCE, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public RerollOnceContext(Reroll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRerollOnce(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRerollOnce(this);
		}
	}
	public partial class RerollRerollContext : Reroll_exprContext {
		public ITerminalNode T_REROLL() { return GetToken(DiceGrammarParser.T_REROLL, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public RerollRerollContext(Reroll_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRerollReroll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRerollReroll(this);
		}
	}

	[RuleVersion(0)]
	public Reroll_exprContext reroll_expr() {
		Reroll_exprContext _localctx = new Reroll_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_reroll_expr);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_REROLL:
				_localctx = new RerollRerollContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(T_REROLL);
				State = 247; compare_expr();
				}
				break;
			case T_REROLL_ONCE:
				_localctx = new RerollOnceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; Match(T_REROLL_ONCE);
				State = 249; compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explode_exprContext : ParserRuleContext {
		public Explode_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explode_expr; } }
	 
		public Explode_exprContext() { }
		public virtual void CopyFrom(Explode_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PenetrateContext : Explode_exprContext {
		public ITerminalNode T_PENETRATE() { return GetToken(DiceGrammarParser.T_PENETRATE, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public PenetrateContext(Explode_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterPenetrate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitPenetrate(this);
		}
	}
	public partial class ExplodeContext : Explode_exprContext {
		public ITerminalNode T_EXPLODE() { return GetToken(DiceGrammarParser.T_EXPLODE, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public ExplodeContext(Explode_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterExplode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitExplode(this);
		}
	}
	public partial class CompoundContext : Explode_exprContext {
		public ITerminalNode T_COMPOUND() { return GetToken(DiceGrammarParser.T_COMPOUND, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public CompoundContext(Explode_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompound(this);
		}
	}

	[RuleVersion(0)]
	public Explode_exprContext explode_expr() {
		Explode_exprContext _localctx = new Explode_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_explode_expr);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EXPLODE:
				_localctx = new ExplodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 252; Match(T_EXPLODE);
				State = 254;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 253; compare_expr();
					}
					break;
				}
				}
				break;
			case T_COMPOUND:
				_localctx = new CompoundContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(T_COMPOUND);
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 257; compare_expr();
					}
					break;
				}
				}
				break;
			case T_PENETRATE:
				_localctx = new PenetrateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; Match(T_PENETRATE);
				State = 262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 261; compare_expr();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Success_exprContext : ParserRuleContext {
		public Success_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_success_expr; } }
	 
		public Success_exprContext() { }
		public virtual void CopyFrom(Success_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SuccessFailContext : Success_exprContext {
		public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public ITerminalNode T_FAIL() { return GetToken(DiceGrammarParser.T_FAIL, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public SuccessFailContext(Success_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterSuccessFail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitSuccessFail(this);
		}
	}

	[RuleVersion(0)]
	public Success_exprContext success_expr() {
		Success_exprContext _localctx = new Success_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_success_expr);
		try {
			_localctx = new SuccessFailContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; explicit_compare_expr();
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 267; Match(T_FAIL);
				State = 268; compare_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_exprContext : ParserRuleContext {
		public Compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_expr; } }
	 
		public Compare_exprContext() { }
		public virtual void CopyFrom(Compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompImplicitContext : Compare_exprContext {
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompImplicitContext(Compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompImplicit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompImplicit(this);
		}
	}
	public partial class CompExplicitContext : Compare_exprContext {
		public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public CompExplicitContext(Compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompExplicit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompExplicit(this);
		}
	}

	[RuleVersion(0)]
	public Compare_exprContext compare_expr() {
		Compare_exprContext _localctx = new Compare_exprContext(Context, State);
		EnterRule(_localctx, 40, RULE_compare_expr);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_NUMBER:
			case T_MACRO:
			case T_LPAREN:
			case T_MINUS:
				_localctx = new CompImplicitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; unary_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new CompExplicitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_compare_exprContext : ParserRuleContext {
		public Explicit_compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_compare_expr; } }
	 
		public Explicit_compare_exprContext() { }
		public virtual void CopyFrom(Explicit_compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_EQUALS() { return GetToken(DiceGrammarParser.T_EQUALS, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompEquals(this);
		}
	}
	public partial class CompGreaterContext : Explicit_compare_exprContext {
		public ITerminalNode T_GREATER() { return GetToken(DiceGrammarParser.T_GREATER, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompGreaterContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompGreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompGreater(this);
		}
	}
	public partial class CompLessContext : Explicit_compare_exprContext {
		public ITerminalNode T_LESS() { return GetToken(DiceGrammarParser.T_LESS, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompLessContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompLess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompLess(this);
		}
	}
	public partial class CompGreaterEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_GREATER_EQUALS() { return GetToken(DiceGrammarParser.T_GREATER_EQUALS, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompGreaterEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompGreaterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompGreaterEquals(this);
		}
	}
	public partial class CompLessEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_LESS_EQUALS() { return GetToken(DiceGrammarParser.T_LESS_EQUALS, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompLessEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompLessEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompLessEquals(this);
		}
	}
	public partial class CompNotEqualsContext : Explicit_compare_exprContext {
		public ITerminalNode T_NOT_EQUALS() { return GetToken(DiceGrammarParser.T_NOT_EQUALS, 0); }
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompNotEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompNotEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompNotEquals(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_compare_exprContext explicit_compare_expr() {
		Explicit_compare_exprContext _localctx = new Explicit_compare_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_explicit_compare_expr);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EQUALS:
				_localctx = new CompEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; Match(T_EQUALS);
				State = 276; unary_expr();
				}
				break;
			case T_GREATER:
				_localctx = new CompGreaterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 277; Match(T_GREATER);
				State = 278; unary_expr();
				}
				break;
			case T_LESS:
				_localctx = new CompLessContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 279; Match(T_LESS);
				State = 280; unary_expr();
				}
				break;
			case T_GREATER_EQUALS:
				_localctx = new CompGreaterEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 281; Match(T_GREATER_EQUALS);
				State = 282; unary_expr();
				}
				break;
			case T_LESS_EQUALS:
				_localctx = new CompLessEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 283; Match(T_LESS_EQUALS);
				State = 284; unary_expr();
				}
				break;
			case T_NOT_EQUALS:
				_localctx = new CompNotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 285; Match(T_NOT_EQUALS);
				State = 286; unary_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_exprContext : ParserRuleContext {
		public Sort_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_expr; } }
	 
		public Sort_exprContext() { }
		public virtual void CopyFrom(Sort_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SortAscContext : Sort_exprContext {
		public ITerminalNode T_SORT_ASC() { return GetToken(DiceGrammarParser.T_SORT_ASC, 0); }
		public SortAscContext(Sort_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterSortAsc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitSortAsc(this);
		}
	}
	public partial class SortDescContext : Sort_exprContext {
		public ITerminalNode T_SORT_DESC() { return GetToken(DiceGrammarParser.T_SORT_DESC, 0); }
		public SortDescContext(Sort_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterSortDesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitSortDesc(this);
		}
	}

	[RuleVersion(0)]
	public Sort_exprContext sort_expr() {
		Sort_exprContext _localctx = new Sort_exprContext(Context, State);
		EnterRule(_localctx, 44, RULE_sort_expr);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_SORT_ASC:
				_localctx = new SortAscContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 289; Match(T_SORT_ASC);
				}
				break;
			case T_SORT_DESC:
				_localctx = new SortDescContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 290; Match(T_SORT_DESC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Crit_exprContext : ParserRuleContext {
		public Crit_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crit_expr; } }
	 
		public Crit_exprContext() { }
		public virtual void CopyFrom(Crit_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CritFumbleContext : Crit_exprContext {
		public ITerminalNode T_CRIT() { return GetToken(DiceGrammarParser.T_CRIT, 0); }
		public Compare_exprContext[] compare_expr() {
			return GetRuleContexts<Compare_exprContext>();
		}
		public Compare_exprContext compare_expr(int i) {
			return GetRuleContext<Compare_exprContext>(i);
		}
		public ITerminalNode T_FAIL() { return GetToken(DiceGrammarParser.T_FAIL, 0); }
		public CritFumbleContext(Crit_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCritFumble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCritFumble(this);
		}
	}
	public partial class FumbleOnlyContext : Crit_exprContext {
		public ITerminalNode T_CRITFAIL() { return GetToken(DiceGrammarParser.T_CRITFAIL, 0); }
		public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public FumbleOnlyContext(Crit_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFumbleOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFumbleOnly(this);
		}
	}

	[RuleVersion(0)]
	public Crit_exprContext crit_expr() {
		Crit_exprContext _localctx = new Crit_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_crit_expr);
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_CRIT:
				_localctx = new CritFumbleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 293; Match(T_CRIT);
				State = 294; compare_expr();
				State = 297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 295; Match(T_FAIL);
					State = 296; compare_expr();
					}
					break;
				}
				}
				break;
			case T_CRITFAIL:
				_localctx = new FumbleOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 299; Match(T_CRITFAIL);
				State = 300; compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return add_expr_sempred((Add_exprContext)_localctx, predIndex);
		case 3: return mult_expr_sempred((Mult_exprContext)_localctx, predIndex);
		case 13: return grouped_roll_inner_sempred((Grouped_roll_innerContext)_localctx, predIndex);
		}
		return true;
	}
	private bool add_expr_sempred(Add_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool mult_expr_sempred(Mult_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool grouped_roll_inner_sempred(Grouped_roll_innerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x132', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x41', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x44', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'O', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'R', '\v', '\x5', '\x3', '\x6', '\x5', '\x6', 'U', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '[', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '^', '\v', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\x61', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x64', '\v', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'g', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', 'l', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'o', '\v', '\x6', '\x3', '\x6', '\a', '\x6', 'r', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'u', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', 'x', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '}', '\n', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\x80', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x83', '\v', '\x6', '\x3', '\x6', '\a', '\x6', '\x86', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x89', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x8C', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x92', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x97', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x9E', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\xA2', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xA9', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xAC', '\v', '\v', '\x5', '\v', '\xAE', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xB8', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xBB', '\v', '\f', '\x5', '\f', '\xBD', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xC7', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xCA', '\v', '\r', '\x5', '\r', '\xCC', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xD2', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xDA', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xDD', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xE3', '\n', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xEB', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF7', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\xFD', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x101', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x105', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x109', '\n', 
		'\x14', '\x5', '\x14', '\x10B', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x110', '\n', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x114', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x122', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x126', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x12C', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x130', '\n', '\x19', '\x3', '\x19', '\x2', '\x5', 
		'\x6', '\b', '\x1C', '\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x2', '\x2', '\x2', '\x154', '\x2', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x37', '\x3', '\x2', '\x2', '\x2', '\b', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x8B', '\x3', '\x2', '\x2', '\x2', '\f', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xE2', '\x3', '\x2', '\x2', '\x2', ' ', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xFC', '\x3', '\x2', '\x2', '\x2', '&', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '(', '\x10C', '\x3', '\x2', '\x2', '\x2', '*', '\x113', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x121', '\x3', '\x2', '\x2', '\x2', '.', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x5', '\x4', '\x3', '\x2', '\x33', '\x34', '\a', '\x2', 
		'\x2', '\x3', '\x34', '\x3', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x5', '\x6', '\x4', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\b', '\x4', '\x1', '\x2', '\x38', '\x39', '\x5', '\b', 
		'\x5', '\x2', '\x39', '\x42', '\x3', '\x2', '\x2', '\x2', ':', ';', '\f', 
		'\x5', '\x2', '\x2', ';', '<', '\a', '\x13', '\x2', '\x2', '<', '\x41', 
		'\x5', '\b', '\x5', '\x2', '=', '>', '\f', '\x4', '\x2', '\x2', '>', '?', 
		'\a', '\x14', '\x2', '\x2', '?', '\x41', '\x5', '\b', '\x5', '\x2', '@', 
		':', '\x3', '\x2', '\x2', '\x2', '@', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\b', '\x5', '\x1', '\x2', '\x46', 'G', '\x5', '\n', '\x6', 
		'\x2', 'G', 'P', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\f', '\x5', '\x2', 
		'\x2', 'I', 'J', '\a', '\x15', '\x2', '\x2', 'J', 'O', '\x5', '\n', '\x6', 
		'\x2', 'K', 'L', '\f', '\x4', '\x2', '\x2', 'L', 'M', '\a', '\x16', '\x2', 
		'\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', '\t', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'U', '\x5', '\xE', '\b', '\x2', 'T', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '\xF', '\x2', '\x2', 'W', 'X', '\x5', '\x1C', 
		'\xF', '\x2', 'X', '\\', '\a', '\x10', '\x2', '\x2', 'Y', '[', '\x5', 
		'\x1E', '\x10', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', 
		'\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', 
		']', '\x3', '\x2', '\x2', '\x2', ']', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x5', '\x16', '\f', 
		'\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x5', '\xE', 
		'\b', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\a', '\x19', '\x2', '\x2', 'i', 'm', '\x5', '\x10', '\t', '\x2', 
		'j', 'l', '\x5', ' ', '\x11', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 's', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'r', '\x5', '\x18', '\r', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x8C', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'x', '\x5', '\xE', '\b', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\a', '\x19', '\x2', '\x2', 'z', '|', '\a', '\x18', '\x2', 
		'\x2', '{', '}', '\x5', '\xE', '\b', '\x2', '|', '{', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x80', '\x5', ' ', '\x11', '\x2', '\x7F', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x87', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\x5', '\x18', '\r', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\f', '\a', 
		'\x2', '\x8B', 'T', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', 'w', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\a', '\x14', '\x2', '\x2', '\x8E', '\x92', '\x5', 
		'\x14', '\v', '\x2', '\x8F', '\x92', '\x5', '\x14', '\v', '\x2', '\x90', 
		'\x92', '\x5', '\xE', '\b', '\x2', '\x91', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\r', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x14', '\x2', '\x2', '\x94', '\x97', '\x5', '\x10', '\t', 
		'\x2', '\x95', '\x97', '\x5', '\x10', '\t', '\x2', '\x96', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\r', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\x4', '\x3', '\x2', '\x9A', '\x9B', '\a', 
		'\xE', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\x5', '\x12', '\n', '\x2', '\x9D', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA2', '\a', '\x5', '\x2', '\x2', '\xA0', 
		'\xA2', '\a', '\x6', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x4', '\x2', '\x2', '\xA4', 
		'\xAD', '\a', '\r', '\x2', '\x2', '\xA5', '\xAA', '\x5', '\x1A', '\xE', 
		'\x2', '\xA6', '\xA7', '\a', '\x11', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		'\x1A', '\xE', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\xE', '\x2', '\x2', '\xB0', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', '\x12', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x3', '\x2', 
		'\x2', '\xB3', '\xBC', '\a', '\r', '\x2', '\x2', '\xB4', '\xB9', '\x5', 
		'\x1A', '\xE', '\x2', '\xB5', '\xB6', '\a', '\x11', '\x2', '\x2', '\xB6', 
		'\xB8', '\x5', '\x1A', '\xE', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '\xE', '\x2', '\x2', '\xBF', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x12', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\x3', '\x2', '\x2', '\xC2', '\xCB', '\a', '\r', '\x2', '\x2', '\xC3', 
		'\xC8', '\x5', '\x1A', '\xE', '\x2', '\xC4', '\xC5', '\a', '\x11', '\x2', 
		'\x2', '\xC5', '\xC7', '\x5', '\x1A', '\xE', '\x2', '\xC6', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\a', '\xE', '\x2', '\x2', '\xCE', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD2', '\x5', '\x4', '\x3', '\x2', '\xD0', 
		'\xD2', '\x5', ',', '\x17', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\b', '\xF', '\x1', '\x2', '\xD4', 
		'\xD5', '\x5', '\x4', '\x3', '\x2', '\xD5', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD7', '\f', '\x4', '\x2', '\x2', '\xD7', '\xD8', '\a', 
		'\x11', '\x2', '\x2', '\xD8', '\xDA', '\x5', '\x4', '\x3', '\x2', '\xD9', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE3', '\x5', '\"', '\x12', 
		'\x2', '\xDF', '\xE3', '\x5', '(', '\x15', '\x2', '\xE0', '\xE3', '\x5', 
		'.', '\x18', '\x2', '\xE1', '\xE3', '\x5', '$', '\x13', '\x2', '\xE2', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xEB', '\x5', '$', '\x13', '\x2', '\xE5', '\xEB', '\x5', '&', '\x14', 
		'\x2', '\xE6', '\xEB', '\x5', '\"', '\x12', '\x2', '\xE7', '\xEB', '\x5', 
		'(', '\x15', '\x2', '\xE8', '\xEB', '\x5', '.', '\x18', '\x2', '\xE9', 
		'\xEB', '\x5', '\x30', '\x19', '\x2', '\xEA', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '!', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', 
		'\x1A', '\x2', '\x2', '\xED', '\xF7', '\x5', '\xE', '\b', '\x2', '\xEE', 
		'\xEF', '\a', '\x1B', '\x2', '\x2', '\xEF', '\xF7', '\x5', '\xE', '\b', 
		'\x2', '\xF0', '\xF1', '\a', '\x1C', '\x2', '\x2', '\xF1', '\xF7', '\x5', 
		'\xE', '\b', '\x2', '\xF2', '\xF3', '\a', '\x1D', '\x2', '\x2', '\xF3', 
		'\xF7', '\x5', '\xE', '\b', '\x2', '\xF4', '\xF7', '\a', '\x1E', '\x2', 
		'\x2', '\xF5', '\xF7', '\a', '\x1F', '\x2', '\x2', '\xF6', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '#', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', ' ', '\x2', '\x2', '\xF9', '\xFD', '\x5', '*', '\x16', '\x2', 
		'\xFA', '\xFB', '\a', '!', '\x2', '\x2', '\xFB', '\xFD', '\x5', '*', '\x16', 
		'\x2', '\xFC', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '%', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\x100', '\a', '\"', '\x2', '\x2', '\xFF', '\x101', '\x5', '*', '\x16', 
		'\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x104', '\a', '#', '\x2', '\x2', '\x103', '\x105', '\x5', '*', 
		'\x16', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x108', '\a', '$', '\x2', '\x2', '\x107', '\x109', '\x5', 
		'*', '\x16', '\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\'', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', '\x5', ',', 
		'\x17', '\x2', '\x10D', '\x10E', '\a', '\'', '\x2', '\x2', '\x10E', '\x110', 
		'\x5', '*', '\x16', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x111', '\x114', '\x5', '\xE', '\b', '\x2', '\x112', '\x114', 
		'\x5', ',', '\x17', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x115', '\x116', '\a', '\a', '\x2', '\x2', '\x116', '\x122', 
		'\x5', '\xE', '\b', '\x2', '\x117', '\x118', '\a', '\b', '\x2', '\x2', 
		'\x118', '\x122', '\x5', '\xE', '\b', '\x2', '\x119', '\x11A', '\a', '\t', 
		'\x2', '\x2', '\x11A', '\x122', '\x5', '\xE', '\b', '\x2', '\x11B', '\x11C', 
		'\a', '\n', '\x2', '\x2', '\x11C', '\x122', '\x5', '\xE', '\b', '\x2', 
		'\x11D', '\x11E', '\a', '\v', '\x2', '\x2', '\x11E', '\x122', '\x5', '\xE', 
		'\b', '\x2', '\x11F', '\x120', '\a', '\f', '\x2', '\x2', '\x120', '\x122', 
		'\x5', '\xE', '\b', '\x2', '\x121', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x117', '\x3', '\x2', '\x2', '\x2', '\x121', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '-', '\x3', '\x2', '\x2', '\x2', '\x123', '\x126', '\a', 
		'(', '\x2', '\x2', '\x124', '\x126', '\a', ')', '\x2', '\x2', '\x125', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '/', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\a', 
		'%', '\x2', '\x2', '\x128', '\x12B', '\x5', '*', '\x16', '\x2', '\x129', 
		'\x12A', '\a', '\'', '\x2', '\x2', '\x12A', '\x12C', '\x5', '*', '\x16', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12E', '\a', '&', '\x2', '\x2', '\x12E', '\x130', '\x5', '*', 
		'\x16', '\x2', '\x12F', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '+', '@', '\x42', 'N', 'P', 'T', '\\', '\x62', '\x66', 'm', 's', 
		'w', '|', '\x81', '\x87', '\x8B', '\x91', '\x96', '\x9D', '\xA1', '\xAA', 
		'\xAD', '\xB9', '\xBC', '\xC8', '\xCB', '\xD1', '\xDB', '\xE2', '\xEA', 
		'\xF6', '\xFC', '\x100', '\x104', '\x108', '\x10A', '\x10F', '\x113', 
		'\x121', '\x125', '\x12B', '\x12F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dice.Grammar
