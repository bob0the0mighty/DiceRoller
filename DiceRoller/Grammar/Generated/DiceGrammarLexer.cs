//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammarLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DiceGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_EQUALS=1, T_GREATER=2, T_LESS=3, T_GREATER_EQUALS=4, T_LESS_EQUALS=5, 
		T_NOT_EQUALS=6, T_LPAREN=7, T_RPAREN=8, T_LBRACE=9, T_RBRACE=10, T_COMMA=11, 
		T_DOT=12, T_PLUS=13, T_MINUS=14, T_MULTIPLY=15, T_DIVIDE=16, T_MACRO=17, 
		T_NUMBER=18, T_FUNCTION=19, T_DIE_BASIC=20, T_DIE_FUDGE=21, T_WS=22, T_EXTRAS=23, 
		AE_WS=24;
	public const int
		ALLOW_EXTRAS=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "ALLOW_EXTRAS"
	};

	public static readonly string[] ruleNames = {
		"T_EQUALS", "T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", 
		"T_NOT_EQUALS", "T_LPAREN", "T_RPAREN", "T_LBRACE", "T_RBRACE", "T_COMMA", 
		"T_DOT", "T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", "T_MACRO", "T_NUMBER", 
		"T_FUNCTION", "T_DIE_BASIC", "T_DIE_FUDGE", "T_WS", "AE_EQUALS", "AE_GREATER", 
		"AE_LESS", "AE_GREATER_EQUALS", "AE_LESS_EQUALS", "AE_NOT_EQUALS", "AE_LPAREN", 
		"AE_RPAREN", "AE_LBRACE", "AE_RBRACE", "AE_COMMA", "AE_DOT", "AE_PLUS", 
		"AE_MINUS", "AE_MULTIPLY", "AE_DIVIDE", "AE_MACRO", "AE_NUMBER", "T_EXTRAS", 
		"AE_WS"
	};


	public DiceGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DiceGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_EQUALS", "T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", 
		"T_NOT_EQUALS", "T_LPAREN", "T_RPAREN", "T_LBRACE", "T_RBRACE", "T_COMMA", 
		"T_DOT", "T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", "T_MACRO", "T_NUMBER", 
		"T_FUNCTION", "T_DIE_BASIC", "T_DIE_FUDGE", "T_WS", "T_EXTRAS", "AE_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiceGrammarLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DiceGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18 : return T_FUNCTION_sempred(_localctx, predIndex);
		case 40 : return T_EXTRAS_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool T_FUNCTION_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  InputStream.LA(1) == '(' && !IsLikelyDiceExpression() ;
		}
		return true;
	}
	private bool T_EXTRAS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  !Text.EndsWith("!") || InputStream.LA(1) != '=' ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,24,296,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,103,
		8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,4,16,133,8,
		16,11,16,12,16,134,1,16,1,16,1,17,4,17,140,8,17,11,17,12,17,141,1,17,1,
		17,4,17,146,8,17,11,17,12,17,147,3,17,150,8,17,1,18,1,18,5,18,154,8,18,
		10,18,12,18,157,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,21,4,21,171,8,21,11,21,12,21,172,1,21,1,21,1,22,1,22,1,22,1,22,
		1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,
		1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,203,8,27,1,27,1,27,1,28,1,
		28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
		31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
		36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,4,38,258,8,38,11,38,12,38,259,1,
		38,1,38,1,38,1,38,1,39,4,39,267,8,39,11,39,12,39,268,1,39,1,39,4,39,273,
		8,39,11,39,12,39,274,3,39,277,8,39,1,39,1,39,1,40,1,40,5,40,283,8,40,10,
		40,12,40,286,9,40,1,40,1,40,1,41,4,41,291,8,41,11,41,12,41,292,1,41,1,
		41,2,134,259,0,42,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,
		24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,0,
		48,0,50,0,52,0,54,0,56,0,58,0,60,0,62,0,64,0,66,0,68,0,70,0,72,0,74,0,
		76,0,78,0,80,0,82,23,84,24,2,0,1,7,1,0,48,57,2,0,65,90,97,122,3,0,48,57,
		65,90,97,122,2,0,68,68,100,100,2,0,70,70,102,102,3,0,9,10,13,13,32,32,
		3,0,33,33,65,90,97,122,308,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,
		0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,
		20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,
		0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,
		0,42,1,0,0,0,0,44,1,0,0,0,1,46,1,0,0,0,1,48,1,0,0,0,1,50,1,0,0,0,1,52,
		1,0,0,0,1,54,1,0,0,0,1,56,1,0,0,0,1,58,1,0,0,0,1,60,1,0,0,0,1,62,1,0,0,
		0,1,64,1,0,0,0,1,66,1,0,0,0,1,68,1,0,0,0,1,70,1,0,0,0,1,72,1,0,0,0,1,74,
		1,0,0,0,1,76,1,0,0,0,1,78,1,0,0,0,1,80,1,0,0,0,1,82,1,0,0,0,1,84,1,0,0,
		0,2,86,1,0,0,0,4,88,1,0,0,0,6,90,1,0,0,0,8,92,1,0,0,0,10,95,1,0,0,0,12,
		102,1,0,0,0,14,104,1,0,0,0,16,108,1,0,0,0,18,112,1,0,0,0,20,114,1,0,0,
		0,22,118,1,0,0,0,24,120,1,0,0,0,26,122,1,0,0,0,28,124,1,0,0,0,30,126,1,
		0,0,0,32,128,1,0,0,0,34,130,1,0,0,0,36,139,1,0,0,0,38,151,1,0,0,0,40,160,
		1,0,0,0,42,164,1,0,0,0,44,170,1,0,0,0,46,176,1,0,0,0,48,180,1,0,0,0,50,
		184,1,0,0,0,52,188,1,0,0,0,54,193,1,0,0,0,56,202,1,0,0,0,58,206,1,0,0,
		0,60,211,1,0,0,0,62,216,1,0,0,0,64,221,1,0,0,0,66,225,1,0,0,0,68,230,1,
		0,0,0,70,235,1,0,0,0,72,240,1,0,0,0,74,245,1,0,0,0,76,250,1,0,0,0,78,255,
		1,0,0,0,80,266,1,0,0,0,82,280,1,0,0,0,84,290,1,0,0,0,86,87,5,61,0,0,87,
		3,1,0,0,0,88,89,5,62,0,0,89,5,1,0,0,0,90,91,5,60,0,0,91,7,1,0,0,0,92,93,
		5,62,0,0,93,94,5,61,0,0,94,9,1,0,0,0,95,96,5,60,0,0,96,97,5,61,0,0,97,
		11,1,0,0,0,98,99,5,33,0,0,99,103,5,61,0,0,100,101,5,60,0,0,101,103,5,62,
		0,0,102,98,1,0,0,0,102,100,1,0,0,0,103,13,1,0,0,0,104,105,5,40,0,0,105,
		106,1,0,0,0,106,107,6,6,0,0,107,15,1,0,0,0,108,109,5,41,0,0,109,110,1,
		0,0,0,110,111,6,7,1,0,111,17,1,0,0,0,112,113,5,123,0,0,113,19,1,0,0,0,
		114,115,5,125,0,0,115,116,1,0,0,0,116,117,6,9,2,0,117,21,1,0,0,0,118,119,
		5,44,0,0,119,23,1,0,0,0,120,121,5,46,0,0,121,25,1,0,0,0,122,123,5,43,0,
		0,123,27,1,0,0,0,124,125,5,45,0,0,125,29,1,0,0,0,126,127,5,42,0,0,127,
		31,1,0,0,0,128,129,5,47,0,0,129,33,1,0,0,0,130,132,5,91,0,0,131,133,9,
		0,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,134,132,1,0,0,0,
		135,136,1,0,0,0,136,137,5,93,0,0,137,35,1,0,0,0,138,140,7,0,0,0,139,138,
		1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,149,1,0,0,
		0,143,145,5,46,0,0,144,146,7,0,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,
		145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,143,1,0,0,0,149,150,1,
		0,0,0,150,37,1,0,0,0,151,155,7,1,0,0,152,154,7,2,0,0,153,152,1,0,0,0,154,
		157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,155,1,
		0,0,0,158,159,4,18,0,0,159,39,1,0,0,0,160,161,7,3,0,0,161,162,1,0,0,0,
		162,163,6,19,2,0,163,41,1,0,0,0,164,165,7,3,0,0,165,166,7,4,0,0,166,167,
		1,0,0,0,167,168,6,20,2,0,168,43,1,0,0,0,169,171,7,5,0,0,170,169,1,0,0,
		0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,
		175,6,21,3,0,175,45,1,0,0,0,176,177,5,61,0,0,177,178,1,0,0,0,178,179,6,
		22,4,0,179,47,1,0,0,0,180,181,5,62,0,0,181,182,1,0,0,0,182,183,6,23,5,
		0,183,49,1,0,0,0,184,185,5,60,0,0,185,186,1,0,0,0,186,187,6,24,6,0,187,
		51,1,0,0,0,188,189,5,62,0,0,189,190,5,61,0,0,190,191,1,0,0,0,191,192,6,
		25,7,0,192,53,1,0,0,0,193,194,5,60,0,0,194,195,5,61,0,0,195,196,1,0,0,
		0,196,197,6,26,8,0,197,55,1,0,0,0,198,199,5,33,0,0,199,203,5,61,0,0,200,
		201,5,60,0,0,201,203,5,62,0,0,202,198,1,0,0,0,202,200,1,0,0,0,203,204,
		1,0,0,0,204,205,6,27,9,0,205,57,1,0,0,0,206,207,5,40,0,0,207,208,1,0,0,
		0,208,209,6,28,0,0,209,210,6,28,10,0,210,59,1,0,0,0,211,212,5,41,0,0,212,
		213,1,0,0,0,213,214,6,29,1,0,214,215,6,29,11,0,215,61,1,0,0,0,216,217,
		5,123,0,0,217,218,1,0,0,0,218,219,6,30,1,0,219,220,6,30,12,0,220,63,1,
		0,0,0,221,222,5,125,0,0,222,223,1,0,0,0,223,224,6,31,13,0,224,65,1,0,0,
		0,225,226,5,44,0,0,226,227,1,0,0,0,227,228,6,32,1,0,228,229,6,32,14,0,
		229,67,1,0,0,0,230,231,5,46,0,0,231,232,1,0,0,0,232,233,6,33,1,0,233,234,
		6,33,15,0,234,69,1,0,0,0,235,236,5,43,0,0,236,237,1,0,0,0,237,238,6,34,
		1,0,238,239,6,34,16,0,239,71,1,0,0,0,240,241,5,45,0,0,241,242,1,0,0,0,
		242,243,6,35,1,0,243,244,6,35,17,0,244,73,1,0,0,0,245,246,5,42,0,0,246,
		247,1,0,0,0,247,248,6,36,1,0,248,249,6,36,18,0,249,75,1,0,0,0,250,251,
		5,47,0,0,251,252,1,0,0,0,252,253,6,37,1,0,253,254,6,37,19,0,254,77,1,0,
		0,0,255,257,5,91,0,0,256,258,9,0,0,0,257,256,1,0,0,0,258,259,1,0,0,0,259,
		260,1,0,0,0,259,257,1,0,0,0,260,261,1,0,0,0,261,262,5,93,0,0,262,263,1,
		0,0,0,263,264,6,38,20,0,264,79,1,0,0,0,265,267,7,0,0,0,266,265,1,0,0,0,
		267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,276,1,0,0,0,270,272,
		5,46,0,0,271,273,7,0,0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,
		0,274,275,1,0,0,0,275,277,1,0,0,0,276,270,1,0,0,0,276,277,1,0,0,0,277,
		278,1,0,0,0,278,279,6,39,21,0,279,81,1,0,0,0,280,284,7,6,0,0,281,283,7,
		6,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,
		285,287,1,0,0,0,286,284,1,0,0,0,287,288,4,40,1,0,288,83,1,0,0,0,289,291,
		7,5,0,0,290,289,1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,
		0,293,294,1,0,0,0,294,295,6,41,3,0,295,85,1,0,0,0,16,0,1,102,134,141,147,
		149,155,172,202,259,268,274,276,284,292,22,5,0,0,4,0,0,5,1,0,6,0,0,7,1,
		0,7,2,0,7,3,0,7,4,0,7,5,0,7,6,0,7,7,0,7,8,0,7,9,0,7,10,0,7,11,0,7,12,0,
		7,13,0,7,14,0,7,15,0,7,16,0,7,17,0,7,18,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dice.Grammar
