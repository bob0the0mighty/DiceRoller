//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiceGrammarParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Dice.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DiceGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_EQUALS=1, T_GREATER=2, T_LESS=3, T_GREATER_EQUALS=4, T_LESS_EQUALS=5, 
		T_NOT_EQUALS=6, T_LPAREN=7, T_RPAREN=8, T_LBRACE=9, T_RBRACE=10, T_COMMA=11, 
		T_DOT=12, T_PLUS=13, T_MINUS=14, T_MULTIPLY=15, T_DIVIDE=16, T_MACRO=17, 
		T_NUMBER=18, T_FUNCTION=19, T_DIE_BASIC=20, T_DIE_FUDGE=21, T_WS=22, T_EXTRAS=23, 
		AE_WS=24;
	public const int
		RULE_input = 0, RULE_math_expr = 1, RULE_add_expr = 2, RULE_mult_expr = 3, 
		RULE_roll_expr = 4, RULE_func_expr = 5, RULE_unary_expr = 6, RULE_number_expr = 7, 
		RULE_number = 8, RULE_global_function = 9, RULE_group_function = 10, RULE_basic_function = 11, 
		RULE_function_arg = 12, RULE_grouped_roll_inner = 13, RULE_grouped_extras = 14, 
		RULE_basic_extras = 15, RULE_compare_expr = 16, RULE_explicit_compare_expr = 17;
	public static readonly string[] ruleNames = {
		"input", "math_expr", "add_expr", "mult_expr", "roll_expr", "func_expr", 
		"unary_expr", "number_expr", "number", "global_function", "group_function", 
		"basic_function", "function_arg", "grouped_roll_inner", "grouped_extras", 
		"basic_extras", "compare_expr", "explicit_compare_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_EQUALS", "T_GREATER", "T_LESS", "T_GREATER_EQUALS", "T_LESS_EQUALS", 
		"T_NOT_EQUALS", "T_LPAREN", "T_RPAREN", "T_LBRACE", "T_RBRACE", "T_COMMA", 
		"T_DOT", "T_PLUS", "T_MINUS", "T_MULTIPLY", "T_DIVIDE", "T_MACRO", "T_NUMBER", 
		"T_FUNCTION", "T_DIE_BASIC", "T_DIE_FUDGE", "T_WS", "T_EXTRAS", "AE_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiceGrammarParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DiceGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DiceGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DiceGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DiceGrammarParser.Eof, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			math_expr();
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_exprContext : ParserRuleContext {
		public Math_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_expr; } }
	 
		public Math_exprContext() { }
		public virtual void CopyFrom(Math_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MathNormalContext : Math_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		public MathNormalContext(Math_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMathNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMathNormal(this);
		}
	}

	[RuleVersion(0)]
	public Math_exprContext math_expr() {
		Math_exprContext _localctx = new Math_exprContext(Context, State);
		EnterRule(_localctx, 2, RULE_math_expr);
		try {
			_localctx = new MathNormalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			add_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
	 
		public Add_exprContext() { }
		public virtual void CopyFrom(Add_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddSubContext : Add_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddSubContext(Add_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
	}
	public partial class AddNoneContext : Add_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddNoneContext(Add_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddNone(this);
		}
	}
	public partial class AddAddContext : Add_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_PLUS() { return GetToken(DiceGrammarParser.T_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public AddAddContext(Add_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterAddAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitAddAdd(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		return add_expr(0);
	}

	private Add_exprContext add_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_exprContext _localctx = new Add_exprContext(Context, _parentState);
		Add_exprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_add_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AddNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 42;
			mult_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 52;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 50;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new AddAddContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 44;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 45;
						Match(T_PLUS);
						State = 46;
						mult_expr(0);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new Add_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expr);
						State = 47;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 48;
						Match(T_MINUS);
						State = 49;
						mult_expr(0);
						}
						break;
					}
					} 
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
	 
		public Mult_exprContext() { }
		public virtual void CopyFrom(Mult_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultMultContext : Mult_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MULTIPLY() { return GetToken(DiceGrammarParser.T_MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultMultContext(Mult_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultMult(this);
		}
	}
	public partial class MultNoneContext : Mult_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultNoneContext(Mult_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultNone(this);
		}
	}
	public partial class MultDivContext : Mult_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DIVIDE() { return GetToken(DiceGrammarParser.T_DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Roll_exprContext roll_expr() {
			return GetRuleContext<Roll_exprContext>(0);
		}
		public MultDivContext(Mult_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterMultDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitMultDiv(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		return mult_expr(0);
	}

	private Mult_exprContext mult_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mult_exprContext _localctx = new Mult_exprContext(Context, _parentState);
		Mult_exprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_mult_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new MultNoneContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 56;
			roll_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 64;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new MultMultContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 58;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 59;
						Match(T_MULTIPLY);
						State = 60;
						roll_expr();
						}
						break;
					case 2:
						{
						_localctx = new MultDivContext(new Mult_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mult_expr);
						State = 61;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 62;
						Match(T_DIVIDE);
						State = 63;
						roll_expr();
						}
						break;
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Roll_exprContext : ParserRuleContext {
		public Roll_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roll_expr; } }
	 
		public Roll_exprContext() { }
		public virtual void CopyFrom(Roll_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RollNoneContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public RollNoneContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollNone(this);
		}
	}
	public partial class RollGroupContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LBRACE() { return GetToken(DiceGrammarParser.T_LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RBRACE() { return GetToken(DiceGrammarParser.T_RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_extrasContext[] grouped_extras() {
			return GetRuleContexts<Grouped_extrasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_extrasContext grouped_extras(int i) {
			return GetRuleContext<Grouped_extrasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_functionContext[] group_function() {
			return GetRuleContexts<Group_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_functionContext group_function(int i) {
			return GetRuleContext<Group_functionContext>(i);
		}
		public RollGroupContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollGroup(this);
		}
	}
	public partial class RollBasicContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DIE_BASIC() { return GetToken(DiceGrammarParser.T_DIE_BASIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public RollBasicContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollBasic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollBasic(this);
		}
	}
	public partial class RollFudgeContext : Roll_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DIE_FUDGE() { return GetToken(DiceGrammarParser.T_DIE_FUDGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext[] basic_extras() {
			return GetRuleContexts<Basic_extrasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_extrasContext basic_extras(int i) {
			return GetRuleContext<Basic_extrasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext[] basic_function() {
			return GetRuleContexts<Basic_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Basic_functionContext basic_function(int i) {
			return GetRuleContext<Basic_functionContext>(i);
		}
		public RollFudgeContext(Roll_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterRollFudge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitRollFudge(this);
		}
	}

	[RuleVersion(0)]
	public Roll_exprContext roll_expr() {
		Roll_exprContext _localctx = new Roll_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_roll_expr);
		int _la;
		try {
			int _alt;
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new RollGroupContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 409728L) != 0) {
					{
					State = 69;
					unary_expr();
					}
				}

				State = 72;
				Match(T_LBRACE);
				State = 73;
				grouped_roll_inner(0);
				State = 74;
				Match(T_RBRACE);
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 75;
						grouped_extras();
						}
						} 
					}
					State = 80;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 81;
						group_function();
						}
						} 
					}
					State = 86;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 2:
				_localctx = new RollBasicContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 409728L) != 0) {
					{
					State = 87;
					unary_expr();
					}
				}

				State = 90;
				Match(T_DIE_BASIC);
				State = 91;
				number_expr();
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 92;
						basic_extras();
						}
						} 
					}
					State = 97;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 98;
						basic_function();
						}
						} 
					}
					State = 103;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 3:
				_localctx = new RollFudgeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 409728L) != 0) {
					{
					State = 104;
					unary_expr();
					}
				}

				State = 107;
				Match(T_DIE_FUDGE);
				State = 109;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 108;
					number_expr();
					}
					break;
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 111;
						basic_extras();
						}
						} 
					}
					State = 116;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 117;
						basic_function();
						}
						} 
					}
					State = 122;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				}
				break;
			case 4:
				_localctx = new RollNoneContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				func_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
	 
		public Func_exprContext() { }
		public virtual void CopyFrom(Func_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncFunctionContext : Func_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public FuncFunctionContext(Func_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncFunction(this);
		}
	}
	public partial class FuncNoneContext : Func_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public FuncNoneContext(Func_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncNone(this);
		}
	}
	public partial class FuncMinusContext : Func_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Global_functionContext global_function() {
			return GetRuleContext<Global_functionContext>(0);
		}
		public FuncMinusContext(Func_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFuncMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFuncMinus(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_func_expr);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new FuncMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				Match(T_MINUS);
				State = 127;
				global_function();
				}
				break;
			case 2:
				_localctx = new FuncFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				global_function();
				}
				break;
			case 3:
				_localctx = new FuncNoneContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				unary_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
	 
		public Unary_exprContext() { }
		public virtual void CopyFrom(Unary_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExprMinusContext : Unary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(DiceGrammarParser.T_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public UnaryExprMinusContext(Unary_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterUnaryExprMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitUnaryExprMinus(this);
		}
	}
	public partial class UnaryExprNoneContext : Unary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Number_exprContext number_expr() {
			return GetRuleContext<Number_exprContext>(0);
		}
		public UnaryExprNoneContext(Unary_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterUnaryExprNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitUnaryExprNone(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary_expr);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_MINUS:
				_localctx = new UnaryExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(T_MINUS);
				State = 133;
				number_expr();
				}
				break;
			case T_LPAREN:
			case T_MACRO:
			case T_NUMBER:
				_localctx = new UnaryExprNoneContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				number_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_exprContext : ParserRuleContext {
		public Number_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_expr; } }
	 
		public Number_exprContext() { }
		public virtual void CopyFrom(Number_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberParenContext : Number_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		public NumberParenContext(Number_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberParen(this);
		}
	}
	public partial class NumberNumberContext : Number_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberNumberContext(Number_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberNumber(this);
		}
	}

	[RuleVersion(0)]
	public Number_exprContext number_expr() {
		Number_exprContext _localctx = new Number_exprContext(Context, State);
		EnterRule(_localctx, 14, RULE_number_expr);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_LPAREN:
				_localctx = new NumberParenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				Match(T_LPAREN);
				State = 138;
				math_expr();
				State = 139;
				Match(T_RPAREN);
				}
				break;
			case T_MACRO:
			case T_NUMBER:
				_localctx = new NumberNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberMacroContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MACRO() { return GetToken(DiceGrammarParser.T_MACRO, 0); }
		public NumberMacroContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberMacro(this);
		}
	}
	public partial class NumberLiteralContext : NumberContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NUMBER() { return GetToken(DiceGrammarParser.T_NUMBER, 0); }
		public NumberLiteralContext(NumberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_NUMBER:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(T_NUMBER);
				}
				break;
			case T_MACRO:
				_localctx = new NumberMacroContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				Match(T_MACRO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_functionContext : ParserRuleContext {
		public Global_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_function; } }
	 
		public Global_functionContext() { }
		public virtual void CopyFrom(Global_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GlobalFunctionContext : Global_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FUNCTION() { return GetToken(DiceGrammarParser.T_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GlobalFunctionContext(Global_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGlobalFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGlobalFunction(this);
		}
	}

	[RuleVersion(0)]
	public Global_functionContext global_function() {
		Global_functionContext _localctx = new Global_functionContext(Context, State);
		EnterRule(_localctx, 18, RULE_global_function);
		int _la;
		try {
			_localctx = new GlobalFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(T_FUNCTION);
			State = 149;
			Match(T_LPAREN);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4080382L) != 0) {
				{
				State = 150;
				function_arg();
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 151;
					Match(T_COMMA);
					State = 152;
					function_arg();
					}
					}
					State = 157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 160;
			Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_functionContext : ParserRuleContext {
		public Group_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_function; } }
	 
		public Group_functionContext() { }
		public virtual void CopyFrom(Group_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupFunctionContext : Group_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DOT() { return GetToken(DiceGrammarParser.T_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FUNCTION() { return GetToken(DiceGrammarParser.T_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public GroupFunctionContext(Group_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupFunction(this);
		}
	}

	[RuleVersion(0)]
	public Group_functionContext group_function() {
		Group_functionContext _localctx = new Group_functionContext(Context, State);
		EnterRule(_localctx, 20, RULE_group_function);
		int _la;
		try {
			_localctx = new GroupFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T_DOT);
			State = 163;
			Match(T_FUNCTION);
			State = 164;
			Match(T_LPAREN);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4080382L) != 0) {
				{
				State = 165;
				function_arg();
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 166;
					Match(T_COMMA);
					State = 167;
					function_arg();
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 175;
			Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_functionContext : ParserRuleContext {
		public Basic_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_function; } }
	 
		public Basic_functionContext() { }
		public virtual void CopyFrom(Basic_functionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicFunctionContext : Basic_functionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DOT() { return GetToken(DiceGrammarParser.T_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FUNCTION() { return GetToken(DiceGrammarParser.T_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LPAREN() { return GetToken(DiceGrammarParser.T_LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RPAREN() { return GetToken(DiceGrammarParser.T_RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_COMMA() { return GetTokens(DiceGrammarParser.T_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA(int i) {
			return GetToken(DiceGrammarParser.T_COMMA, i);
		}
		public BasicFunctionContext(Basic_functionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicFunction(this);
		}
	}

	[RuleVersion(0)]
	public Basic_functionContext basic_function() {
		Basic_functionContext _localctx = new Basic_functionContext(Context, State);
		EnterRule(_localctx, 22, RULE_basic_function);
		int _la;
		try {
			_localctx = new BasicFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T_DOT);
			State = 178;
			Match(T_FUNCTION);
			State = 179;
			Match(T_LPAREN);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4080382L) != 0) {
				{
				State = 180;
				function_arg();
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T_COMMA) {
					{
					{
					State = 181;
					Match(T_COMMA);
					State = 182;
					function_arg();
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 190;
			Match(T_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argContext : ParserRuleContext {
		public Function_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arg; } }
	 
		public Function_argContext() { }
		public virtual void CopyFrom(Function_argContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnArgMathContext : Function_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public FnArgMathContext(Function_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFnArgMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFnArgMath(this);
		}
	}
	public partial class FnArgCompContext : Function_argContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public FnArgCompContext(Function_argContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterFnArgComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitFnArgComp(this);
		}
	}

	[RuleVersion(0)]
	public Function_argContext function_arg() {
		Function_argContext _localctx = new Function_argContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_arg);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_LPAREN:
			case T_LBRACE:
			case T_MINUS:
			case T_MACRO:
			case T_NUMBER:
			case T_FUNCTION:
			case T_DIE_BASIC:
			case T_DIE_FUDGE:
				_localctx = new FnArgMathContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				math_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new FnArgCompContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouped_roll_innerContext : ParserRuleContext {
		public Grouped_roll_innerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_roll_inner; } }
	 
		public Grouped_roll_innerContext() { }
		public virtual void CopyFrom(Grouped_roll_innerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupInitContext : Grouped_roll_innerContext {
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupInitContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupInit(this);
		}
	}
	public partial class GroupAdditionalContext : Grouped_roll_innerContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouped_roll_innerContext grouped_roll_inner() {
			return GetRuleContext<Grouped_roll_innerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_COMMA() { return GetToken(DiceGrammarParser.T_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Math_exprContext math_expr() {
			return GetRuleContext<Math_exprContext>(0);
		}
		public GroupAdditionalContext(Grouped_roll_innerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupAdditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupAdditional(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_roll_innerContext grouped_roll_inner() {
		return grouped_roll_inner(0);
	}

	private Grouped_roll_innerContext grouped_roll_inner(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Grouped_roll_innerContext _localctx = new Grouped_roll_innerContext(Context, _parentState);
		Grouped_roll_innerContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_grouped_roll_inner, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new GroupInitContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 197;
			math_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GroupAdditionalContext(new Grouped_roll_innerContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_grouped_roll_inner);
					State = 199;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 200;
					Match(T_COMMA);
					State = 201;
					math_expr();
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Grouped_extrasContext : ParserRuleContext {
		public Grouped_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouped_extras; } }
	 
		public Grouped_extrasContext() { }
		public virtual void CopyFrom(Grouped_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupEmptyExtraContext : Grouped_extrasContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public GroupEmptyExtraContext(Grouped_extrasContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupEmptyExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupEmptyExtra(this);
		}
	}
	public partial class GroupExtraContext : Grouped_extrasContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EXTRAS() { return GetToken(DiceGrammarParser.T_EXTRAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public GroupExtraContext(Grouped_extrasContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterGroupExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitGroupExtra(this);
		}
	}

	[RuleVersion(0)]
	public Grouped_extrasContext grouped_extras() {
		Grouped_extrasContext _localctx = new Grouped_extrasContext(Context, State);
		EnterRule(_localctx, 28, RULE_grouped_extras);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EXTRAS:
				_localctx = new GroupExtraContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				Match(T_EXTRAS);
				State = 209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 208;
					compare_expr();
					}
					break;
				}
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new GroupEmptyExtraContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_extrasContext : ParserRuleContext {
		public Basic_extrasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_extras; } }
	 
		public Basic_extrasContext() { }
		public virtual void CopyFrom(Basic_extrasContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BasicExtraContext : Basic_extrasContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EXTRAS() { return GetToken(DiceGrammarParser.T_EXTRAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compare_exprContext compare_expr() {
			return GetRuleContext<Compare_exprContext>(0);
		}
		public BasicExtraContext(Basic_extrasContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicExtra(this);
		}
	}
	public partial class BasicEmptyExtraContext : Basic_extrasContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public BasicEmptyExtraContext(Basic_extrasContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterBasicEmptyExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitBasicEmptyExtra(this);
		}
	}

	[RuleVersion(0)]
	public Basic_extrasContext basic_extras() {
		Basic_extrasContext _localctx = new Basic_extrasContext(Context, State);
		EnterRule(_localctx, 30, RULE_basic_extras);
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EXTRAS:
				_localctx = new BasicExtraContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				Match(T_EXTRAS);
				State = 216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 215;
					compare_expr();
					}
					break;
				}
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new BasicEmptyExtraContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_exprContext : ParserRuleContext {
		public Compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_expr; } }
	 
		public Compare_exprContext() { }
		public virtual void CopyFrom(Compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompImplicitContext : Compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompImplicitContext(Compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompImplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompImplicit(this);
		}
	}
	public partial class CompExplicitContext : Compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_compare_exprContext explicit_compare_expr() {
			return GetRuleContext<Explicit_compare_exprContext>(0);
		}
		public CompExplicitContext(Compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompExplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompExplicit(this);
		}
	}

	[RuleVersion(0)]
	public Compare_exprContext compare_expr() {
		Compare_exprContext _localctx = new Compare_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_compare_expr);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_LPAREN:
			case T_MINUS:
			case T_MACRO:
			case T_NUMBER:
				_localctx = new CompImplicitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				unary_expr();
				}
				break;
			case T_EQUALS:
			case T_GREATER:
			case T_LESS:
			case T_GREATER_EQUALS:
			case T_LESS_EQUALS:
			case T_NOT_EQUALS:
				_localctx = new CompExplicitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				explicit_compare_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_compare_exprContext : ParserRuleContext {
		public Explicit_compare_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_compare_expr; } }
	 
		public Explicit_compare_exprContext() { }
		public virtual void CopyFrom(Explicit_compare_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EQUALS() { return GetToken(DiceGrammarParser.T_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompEquals(this);
		}
	}
	public partial class CompGreaterContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GREATER() { return GetToken(DiceGrammarParser.T_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompGreaterContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompGreater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompGreater(this);
		}
	}
	public partial class CompLessContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LESS() { return GetToken(DiceGrammarParser.T_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompLessContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompLess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompLess(this);
		}
	}
	public partial class CompGreaterEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GREATER_EQUALS() { return GetToken(DiceGrammarParser.T_GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompGreaterEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompGreaterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompGreaterEquals(this);
		}
	}
	public partial class CompLessEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LESS_EQUALS() { return GetToken(DiceGrammarParser.T_LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompLessEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompLessEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompLessEquals(this);
		}
	}
	public partial class CompNotEqualsContext : Explicit_compare_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NOT_EQUALS() { return GetToken(DiceGrammarParser.T_NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public CompNotEqualsContext(Explicit_compare_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.EnterCompNotEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiceGrammarParserListener typedListener = listener as IDiceGrammarParserListener;
			if (typedListener != null) typedListener.ExitCompNotEquals(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_compare_exprContext explicit_compare_expr() {
		Explicit_compare_exprContext _localctx = new Explicit_compare_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_explicit_compare_expr);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_EQUALS:
				_localctx = new CompEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(T_EQUALS);
				State = 226;
				unary_expr();
				}
				break;
			case T_GREATER:
				_localctx = new CompGreaterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				Match(T_GREATER);
				State = 228;
				unary_expr();
				}
				break;
			case T_LESS:
				_localctx = new CompLessContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				Match(T_LESS);
				State = 230;
				unary_expr();
				}
				break;
			case T_GREATER_EQUALS:
				_localctx = new CompGreaterEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 231;
				Match(T_GREATER_EQUALS);
				State = 232;
				unary_expr();
				}
				break;
			case T_LESS_EQUALS:
				_localctx = new CompLessEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 233;
				Match(T_LESS_EQUALS);
				State = 234;
				unary_expr();
				}
				break;
			case T_NOT_EQUALS:
				_localctx = new CompNotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 235;
				Match(T_NOT_EQUALS);
				State = 236;
				unary_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return add_expr_sempred((Add_exprContext)_localctx, predIndex);
		case 3: return mult_expr_sempred((Mult_exprContext)_localctx, predIndex);
		case 13: return grouped_roll_inner_sempred((Grouped_roll_innerContext)_localctx, predIndex);
		}
		return true;
	}
	private bool add_expr_sempred(Add_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool mult_expr_sempred(Mult_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool grouped_roll_inner_sempred(Grouped_roll_innerContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,24,240,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,5,2,51,8,2,10,2,12,2,54,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,5,3,65,8,3,10,3,12,3,68,9,3,1,4,3,4,71,8,4,1,4,1,4,1,4,1,4,5,
		4,77,8,4,10,4,12,4,80,9,4,1,4,5,4,83,8,4,10,4,12,4,86,9,4,1,4,3,4,89,8,
		4,1,4,1,4,1,4,5,4,94,8,4,10,4,12,4,97,9,4,1,4,5,4,100,8,4,10,4,12,4,103,
		9,4,1,4,3,4,106,8,4,1,4,1,4,3,4,110,8,4,1,4,5,4,113,8,4,10,4,12,4,116,
		9,4,1,4,5,4,119,8,4,10,4,12,4,122,9,4,1,4,3,4,125,8,4,1,5,1,5,1,5,1,5,
		3,5,131,8,5,1,6,1,6,1,6,3,6,136,8,6,1,7,1,7,1,7,1,7,1,7,3,7,143,8,7,1,
		8,1,8,3,8,147,8,8,1,9,1,9,1,9,1,9,1,9,5,9,154,8,9,10,9,12,9,157,9,9,3,
		9,159,8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,169,8,10,10,10,12,
		10,172,9,10,3,10,174,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,
		184,8,11,10,11,12,11,187,9,11,3,11,189,8,11,1,11,1,11,1,12,1,12,3,12,195,
		8,12,1,13,1,13,1,13,1,13,1,13,1,13,5,13,203,8,13,10,13,12,13,206,9,13,
		1,14,1,14,3,14,210,8,14,1,14,3,14,213,8,14,1,15,1,15,3,15,217,8,15,1,15,
		3,15,220,8,15,1,16,1,16,3,16,224,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,3,17,238,8,17,1,17,0,3,4,6,26,18,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,0,0,261,0,36,1,0,0,0,2,39,1,0,0,
		0,4,41,1,0,0,0,6,55,1,0,0,0,8,124,1,0,0,0,10,130,1,0,0,0,12,135,1,0,0,
		0,14,142,1,0,0,0,16,146,1,0,0,0,18,148,1,0,0,0,20,162,1,0,0,0,22,177,1,
		0,0,0,24,194,1,0,0,0,26,196,1,0,0,0,28,212,1,0,0,0,30,219,1,0,0,0,32,223,
		1,0,0,0,34,237,1,0,0,0,36,37,3,2,1,0,37,38,5,0,0,1,38,1,1,0,0,0,39,40,
		3,4,2,0,40,3,1,0,0,0,41,42,6,2,-1,0,42,43,3,6,3,0,43,52,1,0,0,0,44,45,
		10,3,0,0,45,46,5,13,0,0,46,51,3,6,3,0,47,48,10,2,0,0,48,49,5,14,0,0,49,
		51,3,6,3,0,50,44,1,0,0,0,50,47,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,
		53,1,0,0,0,53,5,1,0,0,0,54,52,1,0,0,0,55,56,6,3,-1,0,56,57,3,8,4,0,57,
		66,1,0,0,0,58,59,10,3,0,0,59,60,5,15,0,0,60,65,3,8,4,0,61,62,10,2,0,0,
		62,63,5,16,0,0,63,65,3,8,4,0,64,58,1,0,0,0,64,61,1,0,0,0,65,68,1,0,0,0,
		66,64,1,0,0,0,66,67,1,0,0,0,67,7,1,0,0,0,68,66,1,0,0,0,69,71,3,12,6,0,
		70,69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,5,9,0,0,73,74,3,26,13,
		0,74,78,5,10,0,0,75,77,3,28,14,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,
		0,0,78,79,1,0,0,0,79,84,1,0,0,0,80,78,1,0,0,0,81,83,3,20,10,0,82,81,1,
		0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,125,1,0,0,0,86,84,1,
		0,0,0,87,89,3,12,6,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,5,
		20,0,0,91,95,3,14,7,0,92,94,3,30,15,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,
		1,0,0,0,95,96,1,0,0,0,96,101,1,0,0,0,97,95,1,0,0,0,98,100,3,22,11,0,99,
		98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,125,1,0,
		0,0,103,101,1,0,0,0,104,106,3,12,6,0,105,104,1,0,0,0,105,106,1,0,0,0,106,
		107,1,0,0,0,107,109,5,21,0,0,108,110,3,14,7,0,109,108,1,0,0,0,109,110,
		1,0,0,0,110,114,1,0,0,0,111,113,3,30,15,0,112,111,1,0,0,0,113,116,1,0,
		0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,120,1,0,0,0,116,114,1,0,0,0,117,
		119,3,22,11,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,
		1,0,0,0,121,125,1,0,0,0,122,120,1,0,0,0,123,125,3,10,5,0,124,70,1,0,0,
		0,124,88,1,0,0,0,124,105,1,0,0,0,124,123,1,0,0,0,125,9,1,0,0,0,126,127,
		5,14,0,0,127,131,3,18,9,0,128,131,3,18,9,0,129,131,3,12,6,0,130,126,1,
		0,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,11,1,0,0,0,132,133,5,14,0,0,
		133,136,3,14,7,0,134,136,3,14,7,0,135,132,1,0,0,0,135,134,1,0,0,0,136,
		13,1,0,0,0,137,138,5,7,0,0,138,139,3,2,1,0,139,140,5,8,0,0,140,143,1,0,
		0,0,141,143,3,16,8,0,142,137,1,0,0,0,142,141,1,0,0,0,143,15,1,0,0,0,144,
		147,5,18,0,0,145,147,5,17,0,0,146,144,1,0,0,0,146,145,1,0,0,0,147,17,1,
		0,0,0,148,149,5,19,0,0,149,158,5,7,0,0,150,155,3,24,12,0,151,152,5,11,
		0,0,152,154,3,24,12,0,153,151,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,
		155,156,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,158,150,1,0,0,0,158,159,
		1,0,0,0,159,160,1,0,0,0,160,161,5,8,0,0,161,19,1,0,0,0,162,163,5,12,0,
		0,163,164,5,19,0,0,164,173,5,7,0,0,165,170,3,24,12,0,166,167,5,11,0,0,
		167,169,3,24,12,0,168,166,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,
		171,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,173,165,1,0,0,0,173,174,1,
		0,0,0,174,175,1,0,0,0,175,176,5,8,0,0,176,21,1,0,0,0,177,178,5,12,0,0,
		178,179,5,19,0,0,179,188,5,7,0,0,180,185,3,24,12,0,181,182,5,11,0,0,182,
		184,3,24,12,0,183,181,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,
		1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,188,180,1,0,0,0,188,189,1,0,0,
		0,189,190,1,0,0,0,190,191,5,8,0,0,191,23,1,0,0,0,192,195,3,2,1,0,193,195,
		3,34,17,0,194,192,1,0,0,0,194,193,1,0,0,0,195,25,1,0,0,0,196,197,6,13,
		-1,0,197,198,3,2,1,0,198,204,1,0,0,0,199,200,10,2,0,0,200,201,5,11,0,0,
		201,203,3,2,1,0,202,199,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,
		1,0,0,0,205,27,1,0,0,0,206,204,1,0,0,0,207,209,5,23,0,0,208,210,3,32,16,
		0,209,208,1,0,0,0,209,210,1,0,0,0,210,213,1,0,0,0,211,213,3,34,17,0,212,
		207,1,0,0,0,212,211,1,0,0,0,213,29,1,0,0,0,214,216,5,23,0,0,215,217,3,
		32,16,0,216,215,1,0,0,0,216,217,1,0,0,0,217,220,1,0,0,0,218,220,3,34,17,
		0,219,214,1,0,0,0,219,218,1,0,0,0,220,31,1,0,0,0,221,224,3,12,6,0,222,
		224,3,34,17,0,223,221,1,0,0,0,223,222,1,0,0,0,224,33,1,0,0,0,225,226,5,
		1,0,0,226,238,3,12,6,0,227,228,5,2,0,0,228,238,3,12,6,0,229,230,5,3,0,
		0,230,238,3,12,6,0,231,232,5,4,0,0,232,238,3,12,6,0,233,234,5,5,0,0,234,
		238,3,12,6,0,235,236,5,6,0,0,236,238,3,12,6,0,237,225,1,0,0,0,237,227,
		1,0,0,0,237,229,1,0,0,0,237,231,1,0,0,0,237,233,1,0,0,0,237,235,1,0,0,
		0,238,35,1,0,0,0,33,50,52,64,66,70,78,84,88,95,101,105,109,114,120,124,
		130,135,142,146,155,158,170,173,185,188,194,204,209,212,216,219,223,237
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Dice.Grammar
